
MaterialGirl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005564  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080058b0  080058b0  000158b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080058b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080058c8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08005928  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  240000d0  08005988  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002b0  08005988  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155f5  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022dc  00000000  00000000  000356f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  000379d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00038618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003220e  00000000  00000000  00039198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc09  00000000  00000000  0006b3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00146b3c  00000000  00000000  0007afaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001c1aeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003284  00000000  00000000  001c1bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000081e  00000000  00000000  001c4e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005818 	.word	0x08005818

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08005818 	.word	0x08005818

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fc5d 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f82f 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f93d 	bl	800089c <MX_GPIO_Init>
  MX_ETH_Init();
 8000622:	f000 f89b 	bl	800075c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000626:	f000 f8e5 	bl	80007f4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800062a:	f000 f92f 	bl	800088c <MX_USB_OTG_HS_USB_Init>

  arm_matrix_instance_f32 A, AI;
  arm_status status;

  arm_mat_init_f32(&A, 4, 4, (float32_t *)A_f32);
 800062e:	f107 000c 	add.w	r0, r7, #12
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <main+0x60>)
 8000634:	2204      	movs	r2, #4
 8000636:	2104      	movs	r1, #4
 8000638:	f005 f8be 	bl	80057b8 <arm_mat_init_f32>
  arm_mat_init_f32(&AI, 4, 4, (float32_t *)AI_f32);
 800063c:	1d38      	adds	r0, r7, #4
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <main+0x64>)
 8000640:	2204      	movs	r2, #4
 8000642:	2104      	movs	r1, #4
 8000644:	f005 f8b8 	bl	80057b8 <arm_mat_init_f32>

  status = arm_mat_inverse_f32(&A, &AI);
 8000648:	1d3a      	adds	r2, r7, #4
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f004 ffb3 	bl	80055bc <arm_mat_inverse_f32>
 8000656:	4603      	mov	r3, r0
 8000658:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN 2 */
  if (status == ARM_MATH_SUCCESS) {
 800065a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d105      	bne.n	800066e <main+0x5e>
	  GPIOB->ODR |= GPIO_ODR_OD0;
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <main+0x68>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <main+0x68>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6153      	str	r3, [r2, #20]
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066e:	e7fe      	b.n	800066e <main+0x5e>
 8000670:	08005830 	.word	0x08005830
 8000674:	24000264 	.word	0x24000264
 8000678:	58020400 	.word	0x58020400

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b09c      	sub	sp, #112	; 0x70
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000686:	224c      	movs	r2, #76	; 0x4c
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f005 f8bc 	bl	8005808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2220      	movs	r2, #32
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f005 f8b6 	bl	8005808 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800069c:	2002      	movs	r0, #2
 800069e:	f001 fb89 	bl	8001db4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <SystemClock_Config+0xdc>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4a2b      	ldr	r2, [pc, #172]	; (8000758 <SystemClock_Config+0xdc>)
 80006ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b0:	6193      	str	r3, [r2, #24]
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemClock_Config+0xdc>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006be:	bf00      	nop
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemClock_Config+0xdc>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006cc:	d1f8      	bne.n	80006c0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006ce:	2321      	movs	r3, #33	; 0x21
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006e8:	f240 1313 	movw	r3, #275	; 0x113
 80006ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006fa:	2304      	movs	r3, #4
 80006fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006fe:	2300      	movs	r3, #0
 8000700:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fb8c 	bl	8001e28 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000716:	f000 f9bd 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	233f      	movs	r3, #63	; 0x3f
 800071c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000726:	2308      	movs	r3, #8
 8000728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072a:	2340      	movs	r3, #64	; 0x40
 800072c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000738:	2340      	movs	r3, #64	; 0x40
 800073a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2103      	movs	r1, #3
 8000740:	4618      	mov	r0, r3
 8000742:	f001 ff1f 	bl	8002584 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800074c:	f000 f9a2 	bl	8000a94 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3770      	adds	r7, #112	; 0x70
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	58024800 	.word	0x58024800

0800075c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_ETH_Init+0x80>)
 8000762:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <MX_ETH_Init+0x84>)
 8000764:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000766:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_ETH_Init+0x88>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_ETH_Init+0x88>)
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_ETH_Init+0x88>)
 8000774:	22e1      	movs	r2, #225	; 0xe1
 8000776:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_ETH_Init+0x88>)
 800077a:	2200      	movs	r2, #0
 800077c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ETH_Init+0x88>)
 8000780:	2200      	movs	r2, #0
 8000782:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_ETH_Init+0x88>)
 8000786:	2200      	movs	r2, #0
 8000788:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_ETH_Init+0x80>)
 800078c:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <MX_ETH_Init+0x88>)
 800078e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_ETH_Init+0x80>)
 8000792:	2201      	movs	r2, #1
 8000794:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_ETH_Init+0x80>)
 8000798:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <MX_ETH_Init+0x8c>)
 800079a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_ETH_Init+0x80>)
 800079e:	4a13      	ldr	r2, [pc, #76]	; (80007ec <MX_ETH_Init+0x90>)
 80007a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_ETH_Init+0x80>)
 80007a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007aa:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_ETH_Init+0x80>)
 80007ac:	f000 fd1c 	bl	80011e8 <HAL_ETH_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007b6:	f000 f96d 	bl	8000a94 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007ba:	2238      	movs	r2, #56	; 0x38
 80007bc:	2100      	movs	r1, #0
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <MX_ETH_Init+0x94>)
 80007c0:	f005 f822 	bl	8005808 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_ETH_Init+0x94>)
 80007c6:	2221      	movs	r2, #33	; 0x21
 80007c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_ETH_Init+0x94>)
 80007cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_ETH_Init+0x94>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	24000124 	.word	0x24000124
 80007e0:	40028000 	.word	0x40028000
 80007e4:	240002a4 	.word	0x240002a4
 80007e8:	24000070 	.word	0x24000070
 80007ec:	24000010 	.word	0x24000010
 80007f0:	240000ec 	.word	0x240000ec

080007f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_USART3_UART_Init+0x90>)
 80007fa:	4a23      	ldr	r2, [pc, #140]	; (8000888 <MX_USART3_UART_Init+0x94>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_USART3_UART_Init+0x90>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_USART3_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_USART3_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_USART3_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_USART3_UART_Init+0x90>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_USART3_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_USART3_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_USART3_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_USART3_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_USART3_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <MX_USART3_UART_Init+0x90>)
 800083e:	f003 fd49 	bl	80042d4 <HAL_UART_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000848:	f000 f924 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_USART3_UART_Init+0x90>)
 8000850:	f004 fdea 	bl	8005428 <HAL_UARTEx_SetTxFifoThreshold>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800085a:	f000 f91b 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4808      	ldr	r0, [pc, #32]	; (8000884 <MX_USART3_UART_Init+0x90>)
 8000862:	f004 fe1f 	bl	80054a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800086c:	f000 f912 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_USART3_UART_Init+0x90>)
 8000872:	f004 fda0 	bl	80053b6 <HAL_UARTEx_DisableFifoMode>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800087c:	f000 f90a 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	240001d4 	.word	0x240001d4
 8000888:	40004800 	.word	0x40004800

0800088c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b71      	ldr	r3, [pc, #452]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	4a6f      	ldr	r2, [pc, #444]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c2:	4b6d      	ldr	r3, [pc, #436]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d0:	4b69      	ldr	r3, [pc, #420]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	4a68      	ldr	r2, [pc, #416]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e0:	4b65      	ldr	r3, [pc, #404]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b62      	ldr	r3, [pc, #392]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	4a60      	ldr	r2, [pc, #384]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fe:	4b5e      	ldr	r3, [pc, #376]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090c:	4b5a      	ldr	r3, [pc, #360]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000912:	4a59      	ldr	r2, [pc, #356]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091c:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b53      	ldr	r3, [pc, #332]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	4a51      	ldr	r2, [pc, #324]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093a:	4b4f      	ldr	r3, [pc, #316]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	f003 0308 	and.w	r3, r3, #8
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000948:	4b4b      	ldr	r3, [pc, #300]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	4a4a      	ldr	r2, [pc, #296]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000958:	4b47      	ldr	r3, [pc, #284]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000966:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	4a42      	ldr	r2, [pc, #264]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000976:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f244 0101 	movw	r1, #16385	; 0x4001
 800098a:	483c      	ldr	r0, [pc, #240]	; (8000a7c <MX_GPIO_Init+0x1e0>)
 800098c:	f001 f9f8 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000996:	483a      	ldr	r0, [pc, #232]	; (8000a80 <MX_GPIO_Init+0x1e4>)
 8000998:	f001 f9f2 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2102      	movs	r1, #2
 80009a0:	4838      	ldr	r0, [pc, #224]	; (8000a84 <MX_GPIO_Init+0x1e8>)
 80009a2:	f001 f9ed 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4833      	ldr	r0, [pc, #204]	; (8000a88 <MX_GPIO_Init+0x1ec>)
 80009bc:	f001 f838 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80009c0:	f244 0301 	movw	r3, #16385	; 0x4001
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4828      	ldr	r0, [pc, #160]	; (8000a7c <MX_GPIO_Init+0x1e0>)
 80009da:	f001 f829 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4822      	ldr	r0, [pc, #136]	; (8000a80 <MX_GPIO_Init+0x1e4>)
 80009f8:	f001 f81a 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481e      	ldr	r0, [pc, #120]	; (8000a8c <MX_GPIO_Init+0x1f0>)
 8000a12:	f001 f80d 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4819      	ldr	r0, [pc, #100]	; (8000a90 <MX_GPIO_Init+0x1f4>)
 8000a2c:	f001 f800 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a42:	230a      	movs	r3, #10
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4810      	ldr	r0, [pc, #64]	; (8000a90 <MX_GPIO_Init+0x1f4>)
 8000a4e:	f000 ffef 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <MX_GPIO_Init+0x1e8>)
 8000a6a:	f000 ffe1 	bl	8001a30 <HAL_GPIO_Init>

}
 8000a6e:	bf00      	nop
 8000a70:	3730      	adds	r7, #48	; 0x30
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	58024400 	.word	0x58024400
 8000a7c:	58020400 	.word	0x58020400
 8000a80:	58020c00 	.word	0x58020c00
 8000a84:	58021000 	.word	0x58021000
 8000a88:	58020800 	.word	0x58020800
 8000a8c:	58021800 	.word	0x58021800
 8000a90:	58020000 	.word	0x58020000

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_MspInit+0x30>)
 8000aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aac:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_MspInit+0x30>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_MspInit+0x30>)
 8000ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	58024400 	.word	0x58024400

08000ad4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a59      	ldr	r2, [pc, #356]	; (8000c58 <HAL_ETH_MspInit+0x184>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	f040 80ab 	bne.w	8000c4e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000af8:	4b58      	ldr	r3, [pc, #352]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000afa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000afe:	4a57      	ldr	r2, [pc, #348]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b08:	4b54      	ldr	r3, [pc, #336]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b16:	4b51      	ldr	r3, [pc, #324]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b1c:	4a4f      	ldr	r2, [pc, #316]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b26:	4b4d      	ldr	r3, [pc, #308]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b34:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b3a:	4a48      	ldr	r2, [pc, #288]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b44:	4b45      	ldr	r3, [pc, #276]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b58:	4a40      	ldr	r2, [pc, #256]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b62:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b3a      	ldr	r3, [pc, #232]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b76:	4a39      	ldr	r2, [pc, #228]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b80:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	4a31      	ldr	r2, [pc, #196]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb2:	4a2a      	ldr	r2, [pc, #168]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <HAL_ETH_MspInit+0x188>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bca:	2332      	movs	r3, #50	; 0x32
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bda:	230b      	movs	r3, #11
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	481e      	ldr	r0, [pc, #120]	; (8000c60 <HAL_ETH_MspInit+0x18c>)
 8000be6:	f000 ff23 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bea:	2386      	movs	r3, #134	; 0x86
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfa:	230b      	movs	r3, #11
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	4817      	ldr	r0, [pc, #92]	; (8000c64 <HAL_ETH_MspInit+0x190>)
 8000c06:	f000 ff13 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1c:	230b      	movs	r3, #11
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4810      	ldr	r0, [pc, #64]	; (8000c68 <HAL_ETH_MspInit+0x194>)
 8000c28:	f000 ff02 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3e:	230b      	movs	r3, #11
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <HAL_ETH_MspInit+0x198>)
 8000c4a:	f000 fef1 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3738      	adds	r7, #56	; 0x38
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40028000 	.word	0x40028000
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58020800 	.word	0x58020800
 8000c64:	58020000 	.word	0x58020000
 8000c68:	58020400 	.word	0x58020400
 8000c6c:	58021800 	.word	0x58021800

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0b6      	sub	sp, #216	; 0xd8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	22b4      	movs	r2, #180	; 0xb4
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f004 fdb9 	bl	8005808 <memset>
  if(huart->Instance==USART3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <HAL_UART_MspInit+0xc0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d142      	bne.n	8000d26 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fff4 	bl	8002c9c <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cba:	f7ff feeb 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_UART_MspInit+0xc4>)
 8000cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_UART_MspInit+0xc4>)
 8000cc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_UART_MspInit+0xc4>)
 8000cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_UART_MspInit+0xc4>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_UART_MspInit+0xc4>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_UART_MspInit+0xc4>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000cfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d14:	2307      	movs	r3, #7
 8000d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_UART_MspInit+0xc8>)
 8000d22:	f000 fe85 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	37d8      	adds	r7, #216	; 0xd8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40004800 	.word	0x40004800
 8000d34:	58024400 	.word	0x58024400
 8000d38:	58020c00 	.word	0x58020c00

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d88:	f000 f916 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <SystemInit+0xd0>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a31      	ldr	r2, [pc, #196]	; (8000e60 <SystemInit+0xd0>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <SystemInit+0xd4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 030f 	and.w	r3, r3, #15
 8000dac:	2b06      	cmp	r3, #6
 8000dae:	d807      	bhi.n	8000dc0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000db0:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <SystemInit+0xd4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f023 030f 	bic.w	r3, r3, #15
 8000db8:	4a2a      	ldr	r2, [pc, #168]	; (8000e64 <SystemInit+0xd4>)
 8000dba:	f043 0307 	orr.w	r3, r3, #7
 8000dbe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dc0:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <SystemInit+0xd8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a28      	ldr	r2, [pc, #160]	; (8000e68 <SystemInit+0xd8>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <SystemInit+0xd8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <SystemInit+0xd8>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4924      	ldr	r1, [pc, #144]	; (8000e68 <SystemInit+0xd8>)
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <SystemInit+0xdc>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <SystemInit+0xd4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <SystemInit+0xd4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f023 030f 	bic.w	r3, r3, #15
 8000df2:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <SystemInit+0xd4>)
 8000df4:	f043 0307 	orr.w	r3, r3, #7
 8000df8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <SystemInit+0xd8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <SystemInit+0xd8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <SystemInit+0xd8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <SystemInit+0xd8>)
 8000e0e:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <SystemInit+0xe0>)
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <SystemInit+0xd8>)
 8000e14:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <SystemInit+0xe4>)
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <SystemInit+0xd8>)
 8000e1a:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <SystemInit+0xe8>)
 8000e1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <SystemInit+0xd8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <SystemInit+0xd8>)
 8000e26:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <SystemInit+0xe8>)
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <SystemInit+0xd8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <SystemInit+0xd8>)
 8000e32:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <SystemInit+0xe8>)
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <SystemInit+0xd8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <SystemInit+0xd8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <SystemInit+0xd8>)
 8000e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <SystemInit+0xd8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <SystemInit+0xec>)
 8000e50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e54:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00
 8000e64:	52002000 	.word	0x52002000
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e70:	02020200 	.word	0x02020200
 8000e74:	01ff0000 	.word	0x01ff0000
 8000e78:	01010280 	.word	0x01010280
 8000e7c:	52004000 	.word	0x52004000

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e84:	f7ff ff84 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e88:	480c      	ldr	r0, [pc, #48]	; (8000ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8a:	490d      	ldr	r1, [pc, #52]	; (8000ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	; (8000ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eae:	f004 fc87 	bl	80057c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fbad 	bl	8000610 <main>
  bx  lr
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ebc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ec0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ec4:	080058b8 	.word	0x080058b8
  ldr r2, =_sbss
 8000ec8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000ecc:	240002b0 	.word	0x240002b0

08000ed0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC3_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eda:	2003      	movs	r0, #3
 8000edc:	f000 f952 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ee0:	f001 fd06 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_Init+0x68>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	0a1b      	lsrs	r3, r3, #8
 8000eec:	f003 030f 	and.w	r3, r3, #15
 8000ef0:	4913      	ldr	r1, [pc, #76]	; (8000f40 <HAL_Init+0x6c>)
 8000ef2:	5ccb      	ldrb	r3, [r1, r3]
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8000efc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_Init+0x68>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_Init+0x6c>)
 8000f08:	5cd3      	ldrb	r3, [r2, r3]
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	fa22 f303 	lsr.w	r3, r2, r3
 8000f14:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <HAL_Init+0x70>)
 8000f16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_Init+0x74>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f814 	bl	8000f4c <HAL_InitTick>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e002      	b.n	8000f34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2e:	f7ff fdb7 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	08005870 	.word	0x08005870
 8000f44:	24000004 	.word	0x24000004
 8000f48:	24000000 	.word	0x24000000

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_InitTick+0x60>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e021      	b.n	8000fa4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_InitTick+0x64>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_InitTick+0x60>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f929 	bl	80011ce <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 f901 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <HAL_InitTick+0x68>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2400000c 	.word	0x2400000c
 8000fb0:	24000000 	.word	0x24000000
 8000fb4:	24000008 	.word	0x24000008

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2400000c 	.word	0x2400000c
 8000fdc:	240002ac 	.word	0x240002ac

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	240002ac 	.word	0x240002ac

08000ff8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001008:	4904      	ldr	r1, [pc, #16]	; (800101c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	58000400 	.word	0x58000400

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	4313      	orrs	r3, r2
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	05fa0000 	.word	0x05fa0000

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff47 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff5e 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff90 	bl	80010d8 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5f 	bl	8001084 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffb2 	bl	8001140 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e0cf      	b.n	800139a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001200:	2b00      	cmp	r3, #0
 8001202:	d106      	bne.n	8001212 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2223      	movs	r2, #35	; 0x23
 8001208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fc61 	bl	8000ad4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b64      	ldr	r3, [pc, #400]	; (80013a4 <HAL_ETH_Init+0x1bc>)
 8001214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001218:	4a62      	ldr	r2, [pc, #392]	; (80013a4 <HAL_ETH_Init+0x1bc>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001222:	4b60      	ldr	r3, [pc, #384]	; (80013a4 <HAL_ETH_Init+0x1bc>)
 8001224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7a1b      	ldrb	r3, [r3, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d103      	bne.n	8001240 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fedd 	bl	8000ff8 <HAL_SYSCFG_ETHInterfaceSelect>
 800123e:	e003      	b.n	8001248 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001240:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001244:	f7ff fed8 	bl	8000ff8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001248:	4b57      	ldr	r3, [pc, #348]	; (80013a8 <HAL_ETH_Init+0x1c0>)
 800124a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001262:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001264:	f7ff febc 	bl	8000fe0 <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800126a:	e011      	b.n	8001290 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800126c:	f7ff feb8 	bl	8000fe0 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800127a:	d909      	bls.n	8001290 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2204      	movs	r2, #4
 8001280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	22e0      	movs	r2, #224	; 0xe0
 8001288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e084      	b.n	800139a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1e4      	bne.n	800126c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f886 	bl	80013b4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80012a8:	f001 fc9c 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a3f      	ldr	r2, [pc, #252]	; (80013ac <HAL_ETH_Init+0x1c4>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	0c9a      	lsrs	r2, r3, #18
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3a01      	subs	r2, #1
 80012bc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fa71 	bl	80017a8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80012d2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012e2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	22e0      	movs	r2, #224	; 0xe0
 80012fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e049      	b.n	800139a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800130e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_ETH_Init+0x1c8>)
 8001314:	4013      	ands	r3, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6952      	ldr	r2, [r2, #20]
 800131a:	0051      	lsls	r1, r2, #1
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	430b      	orrs	r3, r1
 8001322:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001326:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fad9 	bl	80018e2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 fb1f 	bl	8001974 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	3305      	adds	r3, #5
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	021a      	lsls	r2, r3, #8
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	3304      	adds	r3, #4
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	3303      	adds	r3, #3
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	061a      	lsls	r2, r3, #24
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	3302      	adds	r3, #2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	041b      	lsls	r3, r3, #16
 8001368:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	3301      	adds	r3, #1
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001374:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001382:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001384:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2210      	movs	r2, #16
 8001394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	58024400 	.word	0x58024400
 80013a8:	58000400 	.word	0x58000400
 80013ac:	431bde83 	.word	0x431bde83
 80013b0:	ffff8001 	.word	0xffff8001

080013b4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013ce:	f001 fc09 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 80013d2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d908      	bls.n	80013ee <HAL_ETH_SetMDIOClockRange+0x3a>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d804      	bhi.n	80013ee <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e027      	b.n	800143e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	4a18      	ldr	r2, [pc, #96]	; (8001454 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d908      	bls.n	8001408 <HAL_ETH_SetMDIOClockRange+0x54>
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d204      	bcs.n	8001408 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e01a      	b.n	800143e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4a13      	ldr	r2, [pc, #76]	; (8001458 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d303      	bcc.n	8001418 <HAL_ETH_SetMDIOClockRange+0x64>
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d911      	bls.n	800143c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d908      	bls.n	8001432 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d804      	bhi.n	8001432 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	e005      	b.n	800143e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e000      	b.n	800143e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800143c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	01312cff 	.word	0x01312cff
 8001454:	02160ebf 	.word	0x02160ebf
 8001458:	03938700 	.word	0x03938700
 800145c:	05f5e0ff 	.word	0x05f5e0ff
 8001460:	08f0d17f 	.word	0x08f0d17f

08001464 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001476:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	791b      	ldrb	r3, [r3, #4]
 800147c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800147e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	7b1b      	ldrb	r3, [r3, #12]
 8001484:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001486:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	7b5b      	ldrb	r3, [r3, #13]
 800148c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800148e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	7b9b      	ldrb	r3, [r3, #14]
 8001494:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001496:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	7bdb      	ldrb	r3, [r3, #15]
 800149c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800149e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	7c12      	ldrb	r2, [r2, #16]
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d102      	bne.n	80014ae <ETH_SetMACConfig+0x4a>
 80014a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014ac:	e000      	b.n	80014b0 <ETH_SetMACConfig+0x4c>
 80014ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80014b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	7c52      	ldrb	r2, [r2, #17]
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	d102      	bne.n	80014c0 <ETH_SetMACConfig+0x5c>
 80014ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014be:	e000      	b.n	80014c2 <ETH_SetMACConfig+0x5e>
 80014c0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	7c9b      	ldrb	r3, [r3, #18]
 80014c8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80014ca:	431a      	orrs	r2, r3
               macconf->Speed |
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80014d0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80014d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	7f1b      	ldrb	r3, [r3, #28]
 80014dc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80014de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	7f5b      	ldrb	r3, [r3, #29]
 80014e4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80014e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	7f92      	ldrb	r2, [r2, #30]
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d102      	bne.n	80014f6 <ETH_SetMACConfig+0x92>
 80014f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f4:	e000      	b.n	80014f8 <ETH_SetMACConfig+0x94>
 80014f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80014f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	7fdb      	ldrb	r3, [r3, #31]
 80014fe:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001500:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001508:	2a00      	cmp	r2, #0
 800150a:	d102      	bne.n	8001512 <ETH_SetMACConfig+0xae>
 800150c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001510:	e000      	b.n	8001514 <ETH_SetMACConfig+0xb0>
 8001512:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001514:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800151a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001522:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001524:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800152a:	4313      	orrs	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b56      	ldr	r3, [pc, #344]	; (8001690 <ETH_SetMACConfig+0x22c>)
 8001536:	4013      	ands	r3, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	68f9      	ldr	r1, [r7, #12]
 800153e:	430b      	orrs	r3, r1
 8001540:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001546:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800154e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001550:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001558:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800155a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001562:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001564:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800156c:	2a00      	cmp	r2, #0
 800156e:	d102      	bne.n	8001576 <ETH_SetMACConfig+0x112>
 8001570:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001574:	e000      	b.n	8001578 <ETH_SetMACConfig+0x114>
 8001576:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001578:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800157e:	4313      	orrs	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4b42      	ldr	r3, [pc, #264]	; (8001694 <ETH_SetMACConfig+0x230>)
 800158a:	4013      	ands	r3, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	68f9      	ldr	r1, [r7, #12]
 8001592:	430b      	orrs	r3, r1
 8001594:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800159c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80015a2:	4313      	orrs	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <ETH_SetMACConfig+0x234>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	68f9      	ldr	r1, [r7, #12]
 80015b6:	430b      	orrs	r3, r1
 80015b8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015c0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80015c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015ce:	2a00      	cmp	r2, #0
 80015d0:	d101      	bne.n	80015d6 <ETH_SetMACConfig+0x172>
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	e000      	b.n	80015d8 <ETH_SetMACConfig+0x174>
 80015d6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80015d8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015de:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015ea:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80015ee:	4013      	ands	r3, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	430b      	orrs	r3, r1
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001600:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001608:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800160a:	4313      	orrs	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	f023 0103 	bic.w	r1, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	430a      	orrs	r2, r1
 8001622:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800162e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800164a:	2a00      	cmp	r2, #0
 800164c:	d101      	bne.n	8001652 <ETH_SetMACConfig+0x1ee>
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	e000      	b.n	8001654 <ETH_SetMACConfig+0x1f0>
 8001652:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001654:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800165c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800165e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001666:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001668:	4313      	orrs	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001674:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	430a      	orrs	r2, r1
 8001680:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	00048083 	.word	0x00048083
 8001694:	c0f88000 	.word	0xc0f88000
 8001698:	fffffef0 	.word	0xfffffef0

0800169c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b38      	ldr	r3, [pc, #224]	; (8001794 <ETH_SetDMAConfig+0xf8>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	6811      	ldr	r1, [r2, #0]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	430b      	orrs	r3, r1
 80016be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016c2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	791b      	ldrb	r3, [r3, #4]
 80016c8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80016ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	7b1b      	ldrb	r3, [r3, #12]
 80016d4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <ETH_SetDMAConfig+0xfc>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	430b      	orrs	r3, r1
 80016f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016f4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	7b5b      	ldrb	r3, [r3, #13]
 80016fa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001700:	4313      	orrs	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001710:	4b22      	ldr	r3, [pc, #136]	; (800179c <ETH_SetDMAConfig+0x100>)
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	430b      	orrs	r3, r1
 800171c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001720:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	7d1b      	ldrb	r3, [r3, #20]
 800172c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800172e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	7f5b      	ldrb	r3, [r3, #29]
 8001734:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001736:	4313      	orrs	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001742:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <ETH_SetDMAConfig+0x104>)
 8001748:	4013      	ands	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	68f9      	ldr	r1, [r7, #12]
 8001750:	430b      	orrs	r3, r1
 8001752:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001756:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	7f1b      	ldrb	r3, [r3, #28]
 800175e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001764:	4313      	orrs	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001770:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <ETH_SetDMAConfig+0x108>)
 8001776:	4013      	ands	r3, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	430b      	orrs	r3, r1
 8001780:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001784:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	ffff87fd 	.word	0xffff87fd
 8001798:	ffff2ffe 	.word	0xffff2ffe
 800179c:	fffec000 	.word	0xfffec000
 80017a0:	ffc0efef 	.word	0xffc0efef
 80017a4:	7fc0ffff 	.word	0x7fc0ffff

080017a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b0a4      	sub	sp, #144	; 0x90
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017b6:	2300      	movs	r3, #0
 80017b8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001800:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001804:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001810:	2301      	movs	r3, #1
 8001812:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001822:	2300      	movs	r3, #0
 8001824:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001826:	2300      	movs	r3, #0
 8001828:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800182a:	2300      	movs	r3, #0
 800182c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001840:	2320      	movs	r3, #32
 8001842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001852:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001858:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800185c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001864:	2302      	movs	r3, #2
 8001866:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800187c:	2301      	movs	r3, #1
 800187e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001882:	2300      	movs	r3, #0
 8001884:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001886:	2301      	movs	r3, #1
 8001888:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800188c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fde6 	bl	8001464 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001898:	2301      	movs	r3, #1
 800189a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800189c:	2301      	movs	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80018c8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff fee1 	bl	800169c <ETH_SetDMAConfig>
}
 80018da:	bf00      	nop
 80018dc:	3790      	adds	r7, #144	; 0x90
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e01d      	b.n	800192c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68d9      	ldr	r1, [r3, #12]
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2200      	movs	r2, #0
 800190c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	3206      	adds	r2, #6
 8001922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3301      	adds	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d9de      	bls.n	80018f0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001940:	461a      	mov	r2, r3
 8001942:	2303      	movs	r3, #3
 8001944:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001954:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001964:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e023      	b.n	80019ca <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6919      	ldr	r1, [r3, #16]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	3212      	adds	r2, #18
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d9d8      	bls.n	8001982 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f6:	461a      	mov	r2, r3
 80019f8:	2303      	movs	r3, #3
 80019fa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a3e:	4b86      	ldr	r3, [pc, #536]	; (8001c58 <HAL_GPIO_Init+0x228>)
 8001a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a42:	e18c      	b.n	8001d5e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 817e 	beq.w	8001d58 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d005      	beq.n	8001a74 <HAL_GPIO_Init+0x44>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d130      	bne.n	8001ad6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	f003 0201 	and.w	r2, r3, #1
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d017      	beq.n	8001b12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d123      	bne.n	8001b66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	69b9      	ldr	r1, [r7, #24]
 8001b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0203 	and.w	r2, r3, #3
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80d8 	beq.w	8001d58 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_GPIO_Init+0x22c>)
 8001baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bae:	4a2b      	ldr	r2, [pc, #172]	; (8001c5c <HAL_GPIO_Init+0x22c>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <HAL_GPIO_Init+0x22c>)
 8001bba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <HAL_GPIO_Init+0x230>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <HAL_GPIO_Init+0x234>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d04a      	beq.n	8001c88 <HAL_GPIO_Init+0x258>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <HAL_GPIO_Init+0x238>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02b      	beq.n	8001c52 <HAL_GPIO_Init+0x222>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <HAL_GPIO_Init+0x23c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d025      	beq.n	8001c4e <HAL_GPIO_Init+0x21e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <HAL_GPIO_Init+0x240>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01f      	beq.n	8001c4a <HAL_GPIO_Init+0x21a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_GPIO_Init+0x244>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d019      	beq.n	8001c46 <HAL_GPIO_Init+0x216>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <HAL_GPIO_Init+0x248>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x212>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <HAL_GPIO_Init+0x24c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x20e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <HAL_GPIO_Init+0x250>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x20a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a15      	ldr	r2, [pc, #84]	; (8001c84 <HAL_GPIO_Init+0x254>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x206>
 8001c32:	2309      	movs	r3, #9
 8001c34:	e029      	b.n	8001c8a <HAL_GPIO_Init+0x25a>
 8001c36:	230a      	movs	r3, #10
 8001c38:	e027      	b.n	8001c8a <HAL_GPIO_Init+0x25a>
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	e025      	b.n	8001c8a <HAL_GPIO_Init+0x25a>
 8001c3e:	2306      	movs	r3, #6
 8001c40:	e023      	b.n	8001c8a <HAL_GPIO_Init+0x25a>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e021      	b.n	8001c8a <HAL_GPIO_Init+0x25a>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e01f      	b.n	8001c8a <HAL_GPIO_Init+0x25a>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e01d      	b.n	8001c8a <HAL_GPIO_Init+0x25a>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e01b      	b.n	8001c8a <HAL_GPIO_Init+0x25a>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e019      	b.n	8001c8a <HAL_GPIO_Init+0x25a>
 8001c56:	bf00      	nop
 8001c58:	58000080 	.word	0x58000080
 8001c5c:	58024400 	.word	0x58024400
 8001c60:	58000400 	.word	0x58000400
 8001c64:	58020000 	.word	0x58020000
 8001c68:	58020400 	.word	0x58020400
 8001c6c:	58020800 	.word	0x58020800
 8001c70:	58020c00 	.word	0x58020c00
 8001c74:	58021000 	.word	0x58021000
 8001c78:	58021400 	.word	0x58021400
 8001c7c:	58021800 	.word	0x58021800
 8001c80:	58021c00 	.word	0x58021c00
 8001c84:	58022400 	.word	0x58022400
 8001c88:	2300      	movs	r3, #0
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	f002 0203 	and.w	r2, r2, #3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4093      	lsls	r3, r2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9a:	4938      	ldr	r1, [pc, #224]	; (8001d7c <HAL_GPIO_Init+0x34c>)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f ae6b 	bne.w	8001a44 <HAL_GPIO_Init+0x14>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	3724      	adds	r7, #36	; 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	58000400 	.word	0x58000400

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d9c:	e003      	b.n	8001da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	619a      	str	r2, [r3, #24]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_PWREx_ConfigSupply+0x70>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d00a      	beq.n	8001dde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_PWREx_ConfigSupply+0x70>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e01f      	b.n	8001e1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e01d      	b.n	8001e1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_PWREx_ConfigSupply+0x70>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f023 0207 	bic.w	r2, r3, #7
 8001de6:	490f      	ldr	r1, [pc, #60]	; (8001e24 <HAL_PWREx_ConfigSupply+0x70>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001dee:	f7ff f8f7 	bl	8000fe0 <HAL_GetTick>
 8001df2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001df4:	e009      	b.n	8001e0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001df6:	f7ff f8f3 	bl	8000fe0 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e04:	d901      	bls.n	8001e0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e007      	b.n	8001e1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_PWREx_ConfigSupply+0x70>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e16:	d1ee      	bne.n	8001df6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	58024800 	.word	0x58024800

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e39d      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8087 	beq.w	8001f56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e48:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e52:	4b86      	ldr	r3, [pc, #536]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d007      	beq.n	8001e6e <HAL_RCC_OscConfig+0x46>
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	2b18      	cmp	r3, #24
 8001e62:	d110      	bne.n	8001e86 <HAL_RCC_OscConfig+0x5e>
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d10b      	bne.n	8001e86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6e:	4b7f      	ldr	r3, [pc, #508]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d06c      	beq.n	8001f54 <HAL_RCC_OscConfig+0x12c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d168      	bne.n	8001f54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e377      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x76>
 8001e90:	4b76      	ldr	r3, [pc, #472]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a75      	ldr	r2, [pc, #468]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e02e      	b.n	8001efc <HAL_RCC_OscConfig+0xd4>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x98>
 8001ea6:	4b71      	ldr	r3, [pc, #452]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a70      	ldr	r2, [pc, #448]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b6e      	ldr	r3, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a6d      	ldr	r2, [pc, #436]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xd4>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xbc>
 8001eca:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a67      	ldr	r2, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b65      	ldr	r3, [pc, #404]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a64      	ldr	r2, [pc, #400]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xd4>
 8001ee4:	4b61      	ldr	r3, [pc, #388]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a60      	ldr	r2, [pc, #384]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b5e      	ldr	r3, [pc, #376]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a5d      	ldr	r2, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff f86c 	bl	8000fe0 <HAL_GetTick>
 8001f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff f868 	bl	8000fe0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e32b      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f1e:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xe4>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f858 	bl	8000fe0 <HAL_GetTick>
 8001f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff f854 	bl	8000fe0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e317      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f46:	4b49      	ldr	r3, [pc, #292]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x10c>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 808c 	beq.w	800207c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f64:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <HAL_RCC_OscConfig+0x162>
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	2b18      	cmp	r3, #24
 8001f7e:	d137      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1c8>
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d132      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x17a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e2e9      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fa2:	4b32      	ldr	r3, [pc, #200]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0219 	bic.w	r2, r3, #25
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	492f      	ldr	r1, [pc, #188]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fb4:	f7ff f814 	bl	8000fe0 <HAL_GetTick>
 8001fb8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbc:	f7ff f810 	bl	8000fe0 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e2d3      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	061b      	lsls	r3, r3, #24
 8001fe8:	4920      	ldr	r1, [pc, #128]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fee:	e045      	b.n	800207c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d026      	beq.n	8002046 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 0219 	bic.w	r2, r3, #25
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4919      	ldr	r1, [pc, #100]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7fe ffe9 	bl	8000fe0 <HAL_GetTick>
 800200e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002012:	f7fe ffe5 	bl	8000fe0 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e2a8      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	061b      	lsls	r3, r3, #24
 800203e:	490b      	ldr	r1, [pc, #44]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
 8002044:	e01a      	b.n	800207c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_RCC_OscConfig+0x244>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7fe ffc5 	bl	8000fe0 <HAL_GetTick>
 8002056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205a:	f7fe ffc1 	bl	8000fe0 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d903      	bls.n	8002070 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e284      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
 800206c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002070:	4b96      	ldr	r3, [pc, #600]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	d06a      	beq.n	800215e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002088:	4b90      	ldr	r3, [pc, #576]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002090:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002092:	4b8e      	ldr	r3, [pc, #568]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b08      	cmp	r3, #8
 800209c:	d007      	beq.n	80020ae <HAL_RCC_OscConfig+0x286>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b18      	cmp	r3, #24
 80020a2:	d11b      	bne.n	80020dc <HAL_RCC_OscConfig+0x2b4>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d116      	bne.n	80020dc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020ae:	4b87      	ldr	r3, [pc, #540]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x29e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e257      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020c6:	4b81      	ldr	r3, [pc, #516]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	061b      	lsls	r3, r3, #24
 80020d4:	497d      	ldr	r1, [pc, #500]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020da:	e040      	b.n	800215e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d023      	beq.n	800212c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020e4:	4b79      	ldr	r3, [pc, #484]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a78      	ldr	r2, [pc, #480]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80020ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7fe ff76 	bl	8000fe0 <HAL_GetTick>
 80020f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80020f8:	f7fe ff72 	bl	8000fe0 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e235      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800210a:	4b70      	ldr	r3, [pc, #448]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002116:	4b6d      	ldr	r3, [pc, #436]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	061b      	lsls	r3, r3, #24
 8002124:	4969      	ldr	r1, [pc, #420]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	60cb      	str	r3, [r1, #12]
 800212a:	e018      	b.n	800215e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800212c:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a66      	ldr	r2, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe ff52 	bl	8000fe0 <HAL_GetTick>
 800213c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002140:	f7fe ff4e 	bl	8000fe0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e211      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002152:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d036      	beq.n	80021d8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d019      	beq.n	80021a6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002172:	4b56      	ldr	r3, [pc, #344]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002176:	4a55      	ldr	r2, [pc, #340]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7fe ff2f 	bl	8000fe0 <HAL_GetTick>
 8002182:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002186:	f7fe ff2b 	bl	8000fe0 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e1ee      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002198:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 800219a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x35e>
 80021a4:	e018      	b.n	80021d8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a6:	4b49      	ldr	r3, [pc, #292]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021aa:	4a48      	ldr	r2, [pc, #288]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b2:	f7fe ff15 	bl	8000fe0 <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ba:	f7fe ff11 	bl	8000fe0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1d4      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021cc:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80021ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d036      	beq.n	8002252 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d019      	beq.n	8002220 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021ec:	4b37      	ldr	r3, [pc, #220]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a36      	ldr	r2, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80021f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021f8:	f7fe fef2 	bl	8000fe0 <HAL_GetTick>
 80021fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002200:	f7fe feee 	bl	8000fe0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1b1      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002212:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x3d8>
 800221e:	e018      	b.n	8002252 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002220:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a29      	ldr	r2, [pc, #164]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800222a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800222c:	f7fe fed8 	bl	8000fe0 <HAL_GetTick>
 8002230:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002234:	f7fe fed4 	bl	8000fe0 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e197      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8086 	beq.w	800236c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_RCC_OscConfig+0x4a8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_RCC_OscConfig+0x4a8>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800226c:	f7fe feb8 	bl	8000fe0 <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002274:	f7fe feb4 	bl	8000fe0 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e177      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_RCC_OscConfig+0x4a8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d106      	bne.n	80022a8 <HAL_RCC_OscConfig+0x480>
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70
 80022a6:	e032      	b.n	800230e <HAL_RCC_OscConfig+0x4e6>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d111      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4ac>
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a05      	ldr	r2, [pc, #20]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a02      	ldr	r2, [pc, #8]	; (80022cc <HAL_RCC_OscConfig+0x4a4>)
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
 80022c8:	e021      	b.n	800230e <HAL_RCC_OscConfig+0x4e6>
 80022ca:	bf00      	nop
 80022cc:	58024400 	.word	0x58024400
 80022d0:	58024800 	.word	0x58024800
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d10c      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4ce>
 80022dc:	4b83      	ldr	r3, [pc, #524]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4a82      	ldr	r2, [pc, #520]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6713      	str	r3, [r2, #112]	; 0x70
 80022e8:	4b80      	ldr	r3, [pc, #512]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a7f      	ldr	r2, [pc, #508]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	e00b      	b.n	800230e <HAL_RCC_OscConfig+0x4e6>
 80022f6:	4b7d      	ldr	r3, [pc, #500]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	4a7c      	ldr	r2, [pc, #496]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	6713      	str	r3, [r2, #112]	; 0x70
 8002302:	4b7a      	ldr	r3, [pc, #488]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a79      	ldr	r2, [pc, #484]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d015      	beq.n	8002342 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe fe63 	bl	8000fe0 <HAL_GetTick>
 800231a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fe5f 	bl	8000fe0 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e120      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002334:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ee      	beq.n	800231e <HAL_RCC_OscConfig+0x4f6>
 8002340:	e014      	b.n	800236c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002342:	f7fe fe4d 	bl	8000fe0 <HAL_GetTick>
 8002346:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fe fe49 	bl	8000fe0 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e10a      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002360:	4b62      	ldr	r3, [pc, #392]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1ee      	bne.n	800234a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80ff 	beq.w	8002574 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002376:	4b5d      	ldr	r3, [pc, #372]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800237e:	2b18      	cmp	r3, #24
 8002380:	f000 80ba 	beq.w	80024f8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2b02      	cmp	r3, #2
 800238a:	f040 8095 	bne.w	80024b8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238e:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a56      	ldr	r2, [pc, #344]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002394:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe fe21 	bl	8000fe0 <HAL_GetTick>
 800239e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a2:	f7fe fe1d 	bl	8000fe0 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0e0      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f0      	bne.n	80023a2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c0:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80023c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c4:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <HAL_RCC_OscConfig+0x6c8>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	430a      	orrs	r2, r1
 80023d4:	4945      	ldr	r1, [pc, #276]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	628b      	str	r3, [r1, #40]	; 0x28
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	3b01      	subs	r3, #1
 80023e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	3b01      	subs	r3, #1
 80023ea:	025b      	lsls	r3, r3, #9
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	3b01      	subs	r3, #1
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	3b01      	subs	r3, #1
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800240a:	4938      	ldr	r1, [pc, #224]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	4a35      	ldr	r2, [pc, #212]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800241c:	4b33      	ldr	r3, [pc, #204]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 800241e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002420:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <HAL_RCC_OscConfig+0x6cc>)
 8002422:	4013      	ands	r3, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002428:	00d2      	lsls	r2, r2, #3
 800242a:	4930      	ldr	r1, [pc, #192]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002430:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	f023 020c 	bic.w	r2, r3, #12
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	492b      	ldr	r1, [pc, #172]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	f023 0202 	bic.w	r2, r3, #2
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	4927      	ldr	r1, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	4a24      	ldr	r2, [pc, #144]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	4a21      	ldr	r2, [pc, #132]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a18      	ldr	r2, [pc, #96]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fda6 	bl	8000fe0 <HAL_GetTick>
 8002494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fda2 	bl	8000fe0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e065      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x670>
 80024b6:	e05d      	b.n	8002574 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0b      	ldr	r2, [pc, #44]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80024be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fd8c 	bl	8000fe0 <HAL_GetTick>
 80024c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe fd88 	bl	8000fe0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e04b      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024de:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_RCC_OscConfig+0x6c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x6a4>
 80024ea:	e043      	b.n	8002574 <HAL_RCC_OscConfig+0x74c>
 80024ec:	58024400 	.word	0x58024400
 80024f0:	fffffc0c 	.word	0xfffffc0c
 80024f4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <HAL_RCC_OscConfig+0x758>)
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_RCC_OscConfig+0x758>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	2b01      	cmp	r3, #1
 800250a:	d031      	beq.n	8002570 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f003 0203 	and.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d12a      	bne.n	8002570 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d122      	bne.n	8002570 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d11a      	bne.n	8002570 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	0a5b      	lsrs	r3, r3, #9
 800253e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002546:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d111      	bne.n	8002570 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	0c1b      	lsrs	r3, r3, #16
 8002550:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d108      	bne.n	8002570 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	0e1b      	lsrs	r3, r3, #24
 8002562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3730      	adds	r7, #48	; 0x30
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	58024400 	.word	0x58024400

08002584 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e19c      	b.n	80028d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002598:	4b8a      	ldr	r3, [pc, #552]	; (80027c4 <HAL_RCC_ClockConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d910      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b87      	ldr	r3, [pc, #540]	; (80027c4 <HAL_RCC_ClockConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 020f 	bic.w	r2, r3, #15
 80025ae:	4985      	ldr	r1, [pc, #532]	; (80027c4 <HAL_RCC_ClockConfig+0x240>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b83      	ldr	r3, [pc, #524]	; (80027c4 <HAL_RCC_ClockConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e184      	b.n	80028d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d010      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d908      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025e4:	4b78      	ldr	r3, [pc, #480]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	4975      	ldr	r1, [pc, #468]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d010      	beq.n	8002624 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800260e:	429a      	cmp	r2, r3
 8002610:	d908      	bls.n	8002624 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002612:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	496a      	ldr	r1, [pc, #424]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002620:	4313      	orrs	r3, r2
 8002622:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d010      	beq.n	8002652 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	4b64      	ldr	r3, [pc, #400]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800263c:	429a      	cmp	r2, r3
 800263e:	d908      	bls.n	8002652 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002640:	4b61      	ldr	r3, [pc, #388]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	495e      	ldr	r1, [pc, #376]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 800264e:	4313      	orrs	r3, r2
 8002650:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d010      	beq.n	8002680 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	4b59      	ldr	r3, [pc, #356]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800266a:	429a      	cmp	r2, r3
 800266c:	d908      	bls.n	8002680 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800266e:	4b56      	ldr	r3, [pc, #344]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4953      	ldr	r1, [pc, #332]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 800267c:	4313      	orrs	r3, r2
 800267e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d010      	beq.n	80026ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	4b4d      	ldr	r3, [pc, #308]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	429a      	cmp	r2, r3
 800269a:	d908      	bls.n	80026ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b4a      	ldr	r3, [pc, #296]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f023 020f 	bic.w	r2, r3, #15
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4947      	ldr	r1, [pc, #284]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d055      	beq.n	8002766 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026ba:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4940      	ldr	r1, [pc, #256]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026d4:	4b3c      	ldr	r3, [pc, #240]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d121      	bne.n	8002724 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0f6      	b.n	80028d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d115      	bne.n	8002724 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0ea      	b.n	80028d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002704:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0de      	b.n	80028d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002714:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0d6      	b.n	80028d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002724:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f023 0207 	bic.w	r2, r3, #7
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4925      	ldr	r1, [pc, #148]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002732:	4313      	orrs	r3, r2
 8002734:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7fe fc53 	bl	8000fe0 <HAL_GetTick>
 800273a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273c:	e00a      	b.n	8002754 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273e:	f7fe fc4f 	bl	8000fe0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0be      	b.n	80028d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002754:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	429a      	cmp	r2, r3
 8002764:	d1eb      	bne.n	800273e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d010      	beq.n	8002794 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	429a      	cmp	r2, r3
 8002780:	d208      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f023 020f 	bic.w	r2, r3, #15
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	490e      	ldr	r1, [pc, #56]	; (80027c8 <HAL_RCC_ClockConfig+0x244>)
 8002790:	4313      	orrs	r3, r2
 8002792:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_ClockConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d214      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_RCC_ClockConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 020f 	bic.w	r2, r3, #15
 80027aa:	4906      	ldr	r1, [pc, #24]	; (80027c4 <HAL_RCC_ClockConfig+0x240>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_RCC_ClockConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e086      	b.n	80028d2 <HAL_RCC_ClockConfig+0x34e>
 80027c4:	52002000 	.word	0x52002000
 80027c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d010      	beq.n	80027fa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d208      	bcs.n	80027fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027e8:	4b3c      	ldr	r3, [pc, #240]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	4939      	ldr	r1, [pc, #228]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d010      	beq.n	8002828 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002812:	429a      	cmp	r2, r3
 8002814:	d208      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002816:	4b31      	ldr	r3, [pc, #196]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	492e      	ldr	r1, [pc, #184]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 8002824:	4313      	orrs	r3, r2
 8002826:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b00      	cmp	r3, #0
 8002832:	d010      	beq.n	8002856 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002840:	429a      	cmp	r2, r3
 8002842:	d208      	bcs.n	8002856 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	4922      	ldr	r1, [pc, #136]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 8002852:	4313      	orrs	r3, r2
 8002854:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d010      	beq.n	8002884 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800286e:	429a      	cmp	r2, r3
 8002870:	d208      	bcs.n	8002884 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4917      	ldr	r1, [pc, #92]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 8002880:	4313      	orrs	r3, r2
 8002882:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002884:	f000 f834 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	4912      	ldr	r1, [pc, #72]	; (80028e0 <HAL_RCC_ClockConfig+0x35c>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_RCC_ClockConfig+0x358>)
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <HAL_RCC_ClockConfig+0x35c>)
 80028ac:	5cd3      	ldrb	r3, [r2, r3]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
 80028b8:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <HAL_RCC_ClockConfig+0x360>)
 80028ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x364>)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <HAL_RCC_ClockConfig+0x368>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fb40 	bl	8000f4c <HAL_InitTick>
 80028cc:	4603      	mov	r3, r0
 80028ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	58024400 	.word	0x58024400
 80028e0:	08005870 	.word	0x08005870
 80028e4:	24000004 	.word	0x24000004
 80028e8:	24000000 	.word	0x24000000
 80028ec:	24000008 	.word	0x24000008

080028f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f6:	4bb3      	ldr	r3, [pc, #716]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028fe:	2b18      	cmp	r3, #24
 8002900:	f200 8155 	bhi.w	8002bae <HAL_RCC_GetSysClockFreq+0x2be>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	08002971 	.word	0x08002971
 8002910:	08002baf 	.word	0x08002baf
 8002914:	08002baf 	.word	0x08002baf
 8002918:	08002baf 	.word	0x08002baf
 800291c:	08002baf 	.word	0x08002baf
 8002920:	08002baf 	.word	0x08002baf
 8002924:	08002baf 	.word	0x08002baf
 8002928:	08002baf 	.word	0x08002baf
 800292c:	08002997 	.word	0x08002997
 8002930:	08002baf 	.word	0x08002baf
 8002934:	08002baf 	.word	0x08002baf
 8002938:	08002baf 	.word	0x08002baf
 800293c:	08002baf 	.word	0x08002baf
 8002940:	08002baf 	.word	0x08002baf
 8002944:	08002baf 	.word	0x08002baf
 8002948:	08002baf 	.word	0x08002baf
 800294c:	0800299d 	.word	0x0800299d
 8002950:	08002baf 	.word	0x08002baf
 8002954:	08002baf 	.word	0x08002baf
 8002958:	08002baf 	.word	0x08002baf
 800295c:	08002baf 	.word	0x08002baf
 8002960:	08002baf 	.word	0x08002baf
 8002964:	08002baf 	.word	0x08002baf
 8002968:	08002baf 	.word	0x08002baf
 800296c:	080029a3 	.word	0x080029a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002970:	4b94      	ldr	r3, [pc, #592]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d009      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800297c:	4b91      	ldr	r3, [pc, #580]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	08db      	lsrs	r3, r3, #3
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	4a90      	ldr	r2, [pc, #576]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
 800298c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800298e:	e111      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002990:	4b8d      	ldr	r3, [pc, #564]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002992:	61bb      	str	r3, [r7, #24]
    break;
 8002994:	e10e      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002996:	4b8d      	ldr	r3, [pc, #564]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002998:	61bb      	str	r3, [r7, #24]
    break;
 800299a:	e10b      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800299c:	4b8c      	ldr	r3, [pc, #560]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800299e:	61bb      	str	r3, [r7, #24]
    break;
 80029a0:	e108      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029a2:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80029ac:	4b85      	ldr	r3, [pc, #532]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029b8:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029c2:	4b80      	ldr	r3, [pc, #512]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	08db      	lsrs	r3, r3, #3
 80029c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80e1 	beq.w	8002ba8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	f000 8083 	beq.w	8002af4 <HAL_RCC_GetSysClockFreq+0x204>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	f200 80a1 	bhi.w	8002b38 <HAL_RCC_GetSysClockFreq+0x248>
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x114>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d056      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a02:	e099      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a04:	4b6f      	ldr	r3, [pc, #444]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02d      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a10:	4b6c      	ldr	r3, [pc, #432]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	08db      	lsrs	r3, r3, #3
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	4a6b      	ldr	r2, [pc, #428]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a20:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	ee07 3a90 	vmov	s15, r3
 8002a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a3a:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002bd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002a6a:	e087      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002bd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a7e:	4b51      	ldr	r3, [pc, #324]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002bd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002aae:	e065      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002bdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ac2:	4b40      	ldr	r3, [pc, #256]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ad6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002bd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002af2:	e043      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002be0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b06:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002bd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b36:	e021      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002bdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002bd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b7a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	0a5b      	lsrs	r3, r3, #9
 8002b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b86:	3301      	adds	r3, #1
 8002b88:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b94:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ba0:	ee17 3a90 	vmov	r3, s15
 8002ba4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002ba6:	e005      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
    break;
 8002bac:	e002      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bb0:	61bb      	str	r3, [r7, #24]
    break;
 8002bb2:	bf00      	nop
  }

  return sysclockfreq;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	; 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	58024400 	.word	0x58024400
 8002bc8:	03d09000 	.word	0x03d09000
 8002bcc:	003d0900 	.word	0x003d0900
 8002bd0:	007a1200 	.word	0x007a1200
 8002bd4:	46000000 	.word	0x46000000
 8002bd8:	4c742400 	.word	0x4c742400
 8002bdc:	4a742400 	.word	0x4a742400
 8002be0:	4af42400 	.word	0x4af42400

08002be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002bea:	f7ff fe81 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	490f      	ldr	r1, [pc, #60]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x54>)
 8002bfc:	5ccb      	ldrb	r3, [r1, r3]
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x58>)
 8002c20:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c22:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x58>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	58024400 	.word	0x58024400
 8002c38:	08005870 	.word	0x08005870
 8002c3c:	24000004 	.word	0x24000004
 8002c40:	24000000 	.word	0x24000000

08002c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c48:	f7ff ffcc 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	4904      	ldr	r1, [pc, #16]	; (8002c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	58024400 	.word	0x58024400
 8002c6c:	08005870 	.word	0x08005870

08002c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c74:	f7ff ffb6 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4904      	ldr	r1, [pc, #16]	; (8002c98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	58024400 	.word	0x58024400
 8002c98:	08005870 	.word	0x08005870

08002c9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ca8:	2300      	movs	r3, #0
 8002caa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d03f      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cc0:	d02a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cc6:	d824      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ccc:	d018      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cd2:	d81e      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cdc:	d007      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cde:	e018      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce0:	4ba4      	ldr	r3, [pc, #656]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	4aa3      	ldr	r2, [pc, #652]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002cec:	e015      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 f989 	bl	800400c <RCCEx_PLL2_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002cfe:	e00c      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3324      	adds	r3, #36	; 0x24
 8002d04:	2102      	movs	r1, #2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 fa32 	bl	8004170 <RCCEx_PLL3_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d10:	e003      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
      break;
 8002d16:	e000      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d20:	4b94      	ldr	r3, [pc, #592]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	4991      	ldr	r1, [pc, #580]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	650b      	str	r3, [r1, #80]	; 0x50
 8002d32:	e001      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d03d      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d826      	bhi.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d69 	.word	0x08002d69
 8002d58:	08002d77 	.word	0x08002d77
 8002d5c:	08002d89 	.word	0x08002d89
 8002d60:	08002da1 	.word	0x08002da1
 8002d64:	08002da1 	.word	0x08002da1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d68:	4b82      	ldr	r3, [pc, #520]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	4a81      	ldr	r2, [pc, #516]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d74:	e015      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 f945 	bl	800400c <RCCEx_PLL2_Config>
 8002d82:	4603      	mov	r3, r0
 8002d84:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d86:	e00c      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3324      	adds	r3, #36	; 0x24
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 f9ee 	bl	8004170 <RCCEx_PLL3_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d98:	e003      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d9e:	e000      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002da8:	4b72      	ldr	r3, [pc, #456]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dac:	f023 0207 	bic.w	r2, r3, #7
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	496f      	ldr	r1, [pc, #444]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	650b      	str	r3, [r1, #80]	; 0x50
 8002dba:	e001      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d051      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002dd2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002dd6:	d036      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002dd8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002ddc:	d830      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002dde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002de2:	d032      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002de4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002de8:	d82a      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002dea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002dee:	d02e      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002df0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002df4:	d824      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfa:	d018      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e00:	d81e      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002e06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e0a:	d007      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002e0c:	e018      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e0e:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e1a:	e019      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 f8f2 	bl	800400c <RCCEx_PLL2_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002e2c:	e010      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3324      	adds	r3, #36	; 0x24
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 f99b 	bl	8004170 <RCCEx_PLL3_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e3e:	e007      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
      break;
 8002e44:	e004      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002e46:	bf00      	nop
 8002e48:	e002      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e000      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e64:	4943      	ldr	r1, [pc, #268]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	658b      	str	r3, [r1, #88]	; 0x58
 8002e6a:	e001      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d051      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e82:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002e86:	d036      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002e88:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002e8c:	d830      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002e8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e92:	d032      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8002e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e98:	d82a      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002e9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e9e:	d02e      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002ea0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ea4:	d824      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002ea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eaa:	d018      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x242>
 8002eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb0:	d81e      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002eb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eba:	d007      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002ebc:	e018      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ebe:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	4a2c      	ldr	r2, [pc, #176]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002eca:	e019      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 f89a 	bl	800400c <RCCEx_PLL2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002edc:	e010      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3324      	adds	r3, #36	; 0x24
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 f943 	bl	8004170 <RCCEx_PLL3_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002eee:	e007      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef4:	e004      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e002      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002efa:	bf00      	nop
 8002efc:	e000      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f14:	4917      	ldr	r1, [pc, #92]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	658b      	str	r3, [r1, #88]	; 0x58
 8002f1a:	e001      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d035      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f30:	2b30      	cmp	r3, #48	; 0x30
 8002f32:	d01c      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002f34:	2b30      	cmp	r3, #48	; 0x30
 8002f36:	d817      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d00c      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d813      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d019      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d10f      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002f54:	e011      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 f855 	bl	800400c <RCCEx_PLL2_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002f66:	e008      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f6c:	e005      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e003      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002f72:	bf00      	nop
 8002f74:	58024400 	.word	0x58024400
      break;
 8002f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f80:	4ba3      	ldr	r3, [pc, #652]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8c:	49a0      	ldr	r1, [pc, #640]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f92:	e001      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d047      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fac:	d030      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8002fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb2:	d82a      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002fb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fb8:	d02c      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002fba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fbe:	d824      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc4:	d018      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fca:	d81e      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d007      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002fd6:	e018      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd8:	4b8d      	ldr	r3, [pc, #564]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	4a8c      	ldr	r2, [pc, #560]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002fe4:	e017      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 f80d 	bl	800400c <RCCEx_PLL2_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ff6:	e00e      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3324      	adds	r3, #36	; 0x24
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 f8b6 	bl	8004170 <RCCEx_PLL3_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003008:	e005      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
      break;
 800300e:	e002      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003010:	bf00      	nop
 8003012:	e000      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003016:	7dfb      	ldrb	r3, [r7, #23]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800301c:	4b7c      	ldr	r3, [pc, #496]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800301e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003020:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	4979      	ldr	r1, [pc, #484]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800302a:	4313      	orrs	r3, r2
 800302c:	650b      	str	r3, [r1, #80]	; 0x50
 800302e:	e001      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d049      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003048:	d02e      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800304a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304e:	d828      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003050:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003054:	d02a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003056:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800305a:	d822      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800305c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003060:	d026      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003062:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003066:	d81c      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800306c:	d010      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800306e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003072:	d816      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01d      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d111      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	2101      	movs	r1, #1
 8003084:	4618      	mov	r0, r3
 8003086:	f000 ffc1 	bl	800400c <RCCEx_PLL2_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800308e:	e012      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3324      	adds	r3, #36	; 0x24
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f001 f86a 	bl	8004170 <RCCEx_PLL3_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80030a0:	e009      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
      break;
 80030a6:	e006      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80030a8:	bf00      	nop
 80030aa:	e004      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80030ac:	bf00      	nop
 80030ae:	e002      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80030b0:	bf00      	nop
 80030b2:	e000      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80030b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030bc:	4b54      	ldr	r3, [pc, #336]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80030be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	4951      	ldr	r1, [pc, #324]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	650b      	str	r3, [r1, #80]	; 0x50
 80030ce:	e001      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d04b      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ea:	d02e      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80030ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f0:	d828      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f6:	d02a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fc:	d822      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80030fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003102:	d026      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003104:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003108:	d81c      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800310a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800310e:	d010      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003114:	d816      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01d      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800311a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800311e:	d111      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	2101      	movs	r1, #1
 8003126:	4618      	mov	r0, r3
 8003128:	f000 ff70 	bl	800400c <RCCEx_PLL2_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003130:	e012      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3324      	adds	r3, #36	; 0x24
 8003136:	2101      	movs	r1, #1
 8003138:	4618      	mov	r0, r3
 800313a:	f001 f819 	bl	8004170 <RCCEx_PLL3_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003142:	e009      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
      break;
 8003148:	e006      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800314a:	bf00      	nop
 800314c:	e004      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800314e:	bf00      	nop
 8003150:	e002      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800315e:	4b2c      	ldr	r3, [pc, #176]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800316c:	4928      	ldr	r1, [pc, #160]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800316e:	4313      	orrs	r3, r2
 8003170:	658b      	str	r3, [r1, #88]	; 0x58
 8003172:	e001      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d02f      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800318c:	d00e      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x510>
 800318e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003192:	d814      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d015      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319c:	d10f      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	4a1b      	ldr	r2, [pc, #108]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80031a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80031aa:	e00c      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	2101      	movs	r1, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 ff2a 	bl	800400c <RCCEx_PLL2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80031bc:	e003      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
      break;
 80031c2:	e000      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80031c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80031ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d8:	490d      	ldr	r1, [pc, #52]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	650b      	str	r3, [r1, #80]	; 0x50
 80031de:	e001      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d034      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d81d      	bhi.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80031f8:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	0800323b 	.word	0x0800323b
 8003204:	08003215 	.word	0x08003215
 8003208:	08003223 	.word	0x08003223
 800320c:	0800323b 	.word	0x0800323b
 8003210:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003214:	4bb1      	ldr	r3, [pc, #708]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	4ab0      	ldr	r2, [pc, #704]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800321a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003220:	e00c      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	2102      	movs	r1, #2
 8003228:	4618      	mov	r0, r3
 800322a:	f000 feef 	bl	800400c <RCCEx_PLL2_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003232:	e003      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
      break;
 8003238:	e000      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800323a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003242:	4ba6      	ldr	r3, [pc, #664]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	f023 0203 	bic.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	49a3      	ldr	r1, [pc, #652]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003250:	4313      	orrs	r3, r2
 8003252:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003254:	e001      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003256:	7dfb      	ldrb	r3, [r7, #23]
 8003258:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8086 	beq.w	8003374 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003268:	4b9d      	ldr	r3, [pc, #628]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a9c      	ldr	r2, [pc, #624]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003274:	f7fd feb4 	bl	8000fe0 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800327a:	e009      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327c:	f7fd feb0 	bl	8000fe0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d902      	bls.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	75fb      	strb	r3, [r7, #23]
        break;
 800328e:	e005      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003290:	4b93      	ldr	r3, [pc, #588]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ef      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d166      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80032a2:	4b8e      	ldr	r3, [pc, #568]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80032a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032ac:	4053      	eors	r3, r2
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d013      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b6:	4b89      	ldr	r3, [pc, #548]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032c0:	4b86      	ldr	r3, [pc, #536]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	4a85      	ldr	r2, [pc, #532]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032cc:	4b83      	ldr	r3, [pc, #524]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a82      	ldr	r2, [pc, #520]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80032d8:	4a80      	ldr	r2, [pc, #512]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e8:	d115      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fd fe79 	bl	8000fe0 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032f0:	e00b      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fd fe75 	bl	8000fe0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d902      	bls.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	75fb      	strb	r3, [r7, #23]
            break;
 8003308:	e005      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800330a:	4b74      	ldr	r3, [pc, #464]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0ed      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d126      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332a:	d10d      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800332c:	4b6b      	ldr	r3, [pc, #428]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800333a:	0919      	lsrs	r1, r3, #4
 800333c:	4b69      	ldr	r3, [pc, #420]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800333e:	400b      	ands	r3, r1
 8003340:	4966      	ldr	r1, [pc, #408]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003342:	4313      	orrs	r3, r2
 8003344:	610b      	str	r3, [r1, #16]
 8003346:	e005      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003348:	4b64      	ldr	r3, [pc, #400]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	4a63      	ldr	r2, [pc, #396]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800334e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003352:	6113      	str	r3, [r2, #16]
 8003354:	4b61      	ldr	r3, [pc, #388]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003356:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800335e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003362:	495e      	ldr	r1, [pc, #376]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003364:	4313      	orrs	r3, r2
 8003366:	670b      	str	r3, [r1, #112]	; 0x70
 8003368:	e004      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	75bb      	strb	r3, [r7, #22]
 800336e:	e001      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d07e      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003384:	2b28      	cmp	r3, #40	; 0x28
 8003386:	d867      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003388:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	0800345f 	.word	0x0800345f
 8003394:	08003459 	.word	0x08003459
 8003398:	08003459 	.word	0x08003459
 800339c:	08003459 	.word	0x08003459
 80033a0:	08003459 	.word	0x08003459
 80033a4:	08003459 	.word	0x08003459
 80033a8:	08003459 	.word	0x08003459
 80033ac:	08003459 	.word	0x08003459
 80033b0:	08003435 	.word	0x08003435
 80033b4:	08003459 	.word	0x08003459
 80033b8:	08003459 	.word	0x08003459
 80033bc:	08003459 	.word	0x08003459
 80033c0:	08003459 	.word	0x08003459
 80033c4:	08003459 	.word	0x08003459
 80033c8:	08003459 	.word	0x08003459
 80033cc:	08003459 	.word	0x08003459
 80033d0:	08003447 	.word	0x08003447
 80033d4:	08003459 	.word	0x08003459
 80033d8:	08003459 	.word	0x08003459
 80033dc:	08003459 	.word	0x08003459
 80033e0:	08003459 	.word	0x08003459
 80033e4:	08003459 	.word	0x08003459
 80033e8:	08003459 	.word	0x08003459
 80033ec:	08003459 	.word	0x08003459
 80033f0:	0800345f 	.word	0x0800345f
 80033f4:	08003459 	.word	0x08003459
 80033f8:	08003459 	.word	0x08003459
 80033fc:	08003459 	.word	0x08003459
 8003400:	08003459 	.word	0x08003459
 8003404:	08003459 	.word	0x08003459
 8003408:	08003459 	.word	0x08003459
 800340c:	08003459 	.word	0x08003459
 8003410:	0800345f 	.word	0x0800345f
 8003414:	08003459 	.word	0x08003459
 8003418:	08003459 	.word	0x08003459
 800341c:	08003459 	.word	0x08003459
 8003420:	08003459 	.word	0x08003459
 8003424:	08003459 	.word	0x08003459
 8003428:	08003459 	.word	0x08003459
 800342c:	08003459 	.word	0x08003459
 8003430:	0800345f 	.word	0x0800345f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3304      	adds	r3, #4
 8003438:	2101      	movs	r1, #1
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fde6 	bl	800400c <RCCEx_PLL2_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003444:	e00c      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3324      	adds	r3, #36	; 0x24
 800344a:	2101      	movs	r1, #1
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fe8f 	bl	8004170 <RCCEx_PLL3_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003456:	e003      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	75fb      	strb	r3, [r7, #23]
      break;
 800345c:	e000      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800345e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003472:	491a      	ldr	r1, [pc, #104]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003474:	4313      	orrs	r3, r2
 8003476:	654b      	str	r3, [r1, #84]	; 0x54
 8003478:	e001      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347a:	7dfb      	ldrb	r3, [r7, #23]
 800347c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d03e      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	2b05      	cmp	r3, #5
 8003490:	d820      	bhi.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003492:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	080034e9 	.word	0x080034e9
 800349c:	080034b1 	.word	0x080034b1
 80034a0:	080034c3 	.word	0x080034c3
 80034a4:	080034e9 	.word	0x080034e9
 80034a8:	080034e9 	.word	0x080034e9
 80034ac:	080034e9 	.word	0x080034e9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3304      	adds	r3, #4
 80034b4:	2101      	movs	r1, #1
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fda8 	bl	800400c <RCCEx_PLL2_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80034c0:	e013      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3324      	adds	r3, #36	; 0x24
 80034c6:	2101      	movs	r1, #1
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fe51 	bl	8004170 <RCCEx_PLL3_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80034d2:	e00a      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	75fb      	strb	r3, [r7, #23]
      break;
 80034d8:	e007      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80034da:	bf00      	nop
 80034dc:	58024400 	.word	0x58024400
 80034e0:	58024800 	.word	0x58024800
 80034e4:	00ffffcf 	.word	0x00ffffcf
      break;
 80034e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80034f0:	4b9f      	ldr	r3, [pc, #636]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	f023 0207 	bic.w	r2, r3, #7
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	499c      	ldr	r1, [pc, #624]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	654b      	str	r3, [r1, #84]	; 0x54
 8003502:	e001      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d039      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800351a:	2b05      	cmp	r3, #5
 800351c:	d820      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003567 	.word	0x08003567
 8003528:	0800353d 	.word	0x0800353d
 800352c:	0800354f 	.word	0x0800354f
 8003530:	08003567 	.word	0x08003567
 8003534:	08003567 	.word	0x08003567
 8003538:	08003567 	.word	0x08003567
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	2101      	movs	r1, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fd62 	bl	800400c <RCCEx_PLL2_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800354c:	e00c      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3324      	adds	r3, #36	; 0x24
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fe0b 	bl	8004170 <RCCEx_PLL3_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800355e:	e003      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	75fb      	strb	r3, [r7, #23]
      break;
 8003564:	e000      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800356e:	4b80      	ldr	r3, [pc, #512]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	f023 0207 	bic.w	r2, r3, #7
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800357c:	497c      	ldr	r1, [pc, #496]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	658b      	str	r3, [r1, #88]	; 0x58
 8003582:	e001      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d04b      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800359e:	d02e      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x962>
 80035a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035a4:	d828      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80035a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035aa:	d02a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b0:	d822      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80035b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035b6:	d026      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80035b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035bc:	d81c      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80035be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c2:	d010      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80035c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c8:	d816      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01d      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80035ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d2:	d111      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3304      	adds	r3, #4
 80035d8:	2100      	movs	r1, #0
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fd16 	bl	800400c <RCCEx_PLL2_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80035e4:	e012      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3324      	adds	r3, #36	; 0x24
 80035ea:	2102      	movs	r1, #2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fdbf 	bl	8004170 <RCCEx_PLL3_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80035f6:	e009      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	75fb      	strb	r3, [r7, #23]
      break;
 80035fc:	e006      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80035fe:	bf00      	nop
 8003600:	e004      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003602:	bf00      	nop
 8003604:	e002      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800360a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10a      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003612:	4b57      	ldr	r3, [pc, #348]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003620:	4953      	ldr	r1, [pc, #332]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	654b      	str	r3, [r1, #84]	; 0x54
 8003626:	e001      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d04b      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003642:	d02e      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003644:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003648:	d828      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800364a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364e:	d02a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003654:	d822      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003656:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800365a:	d026      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800365c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003660:	d81c      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003666:	d010      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366c:	d816      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01d      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003676:	d111      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fcc4 	bl	800400c <RCCEx_PLL2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003688:	e012      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3324      	adds	r3, #36	; 0x24
 800368e:	2102      	movs	r1, #2
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fd6d 	bl	8004170 <RCCEx_PLL3_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800369a:	e009      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
      break;
 80036a0:	e006      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80036a2:	bf00      	nop
 80036a4:	e004      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80036a6:	bf00      	nop
 80036a8:	e002      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80036ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c4:	492a      	ldr	r1, [pc, #168]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	658b      	str	r3, [r1, #88]	; 0x58
 80036ca:	e001      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d04d      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80036e6:	d02e      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80036e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80036ec:	d828      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80036ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f2:	d02a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80036f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f8:	d822      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80036fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036fe:	d026      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003700:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003704:	d81c      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800370a:	d010      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800370c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003710:	d816      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d01d      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371a:	d111      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fc72 	bl	800400c <RCCEx_PLL2_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800372c:	e012      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3324      	adds	r3, #36	; 0x24
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fd1b 	bl	8004170 <RCCEx_PLL3_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800373e:	e009      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	75fb      	strb	r3, [r7, #23]
      break;
 8003744:	e006      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003746:	bf00      	nop
 8003748:	e004      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800374a:	bf00      	nop
 800374c:	e002      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800374e:	bf00      	nop
 8003750:	e000      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10c      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003768:	4901      	ldr	r1, [pc, #4]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	658b      	str	r3, [r1, #88]	; 0x58
 800376e:	e003      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d018      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378c:	d10a      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3324      	adds	r3, #36	; 0x24
 8003792:	2102      	movs	r1, #2
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fceb 	bl	8004170 <RCCEx_PLL3_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80037a4:	4b8a      	ldr	r3, [pc, #552]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b0:	4987      	ldr	r1, [pc, #540]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037cc:	d10a      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3324      	adds	r3, #36	; 0x24
 80037d2:	2102      	movs	r1, #2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fccb 	bl	8004170 <RCCEx_PLL3_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037e4:	4b7a      	ldr	r3, [pc, #488]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	4977      	ldr	r1, [pc, #476]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d034      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800380a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800380e:	d01d      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003814:	d817      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800381a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381e:	d009      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003820:	e011      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3304      	adds	r3, #4
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fbef 	bl	800400c <RCCEx_PLL2_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003832:	e00c      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3324      	adds	r3, #36	; 0x24
 8003838:	2102      	movs	r1, #2
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fc98 	bl	8004170 <RCCEx_PLL3_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003844:	e003      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
      break;
 800384a:	e000      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800384c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003854:	4b5e      	ldr	r3, [pc, #376]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003862:	495b      	ldr	r1, [pc, #364]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003864:	4313      	orrs	r3, r2
 8003866:	658b      	str	r3, [r1, #88]	; 0x58
 8003868:	e001      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d033      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003880:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003884:	d01c      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003886:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800388a:	d816      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800388c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003890:	d003      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003896:	d007      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003898:	e00f      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389a:	4b4d      	ldr	r3, [pc, #308]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	4a4c      	ldr	r2, [pc, #304]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80038a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80038a6:	e00c      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3324      	adds	r3, #36	; 0x24
 80038ac:	2101      	movs	r1, #1
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fc5e 	bl	8004170 <RCCEx_PLL3_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80038b8:	e003      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
      break;
 80038be:	e000      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80038c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038c8:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d6:	493e      	ldr	r1, [pc, #248]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	654b      	str	r3, [r1, #84]	; 0x54
 80038dc:	e001      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d029      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80038f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fa:	d007      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80038fc:	e00f      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038fe:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	4a33      	ldr	r2, [pc, #204]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003908:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800390a:	e00b      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2102      	movs	r1, #2
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fb7a 	bl	800400c <RCCEx_PLL2_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
      break;
 8003922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800392a:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800392c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	4926      	ldr	r1, [pc, #152]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003938:	4313      	orrs	r3, r2
 800393a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800393c:	e001      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3324      	adds	r3, #36	; 0x24
 8003952:	2102      	movs	r1, #2
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fc0b 	bl	8004170 <RCCEx_PLL3_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d033      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003978:	d017      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800397a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397e:	d811      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003984:	d013      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8003986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800398a:	d80b      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d010      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8003990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003994:	d106      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	4a0d      	ldr	r2, [pc, #52]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80039a2:	e007      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	75fb      	strb	r3, [r7, #23]
      break;
 80039a8:	e004      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80039b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039c6:	4902      	ldr	r1, [pc, #8]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	654b      	str	r3, [r1, #84]	; 0x54
 80039cc:	e004      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80039ce:	bf00      	nop
 80039d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039e4:	4b29      	ldr	r3, [pc, #164]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f0:	4926      	ldr	r1, [pc, #152]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a0e:	491f      	ldr	r1, [pc, #124]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00d      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a20:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003a26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a2a:	6113      	str	r3, [r2, #16]
 8003a2c:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a36:	4915      	ldr	r1, [pc, #84]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	da08      	bge.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a50:	490e      	ldr	r1, [pc, #56]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a70:	4906      	ldr	r1, [pc, #24]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003a76:	7dbb      	ldrb	r3, [r7, #22]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e000      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	58024400 	.word	0x58024400

08003a90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003a94:	f7ff f8a6 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4904      	ldr	r1, [pc, #16]	; (8003ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	08005870 	.word	0x08005870

08003abc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	; 0x24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ac4:	4ba1      	ldr	r3, [pc, #644]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003ace:	4b9f      	ldr	r3, [pc, #636]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	0b1b      	lsrs	r3, r3, #12
 8003ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003ada:	4b9c      	ldr	r3, [pc, #624]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003ae6:	4b99      	ldr	r3, [pc, #612]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	08db      	lsrs	r3, r3, #3
 8003aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8111 	beq.w	8003d2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	f000 8083 	beq.w	8003c18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	f200 80a1 	bhi.w	8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d056      	beq.n	8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b26:	e099      	b.n	8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b28:	4b88      	ldr	r3, [pc, #544]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02d      	beq.n	8003b90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b34:	4b85      	ldr	r3, [pc, #532]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	08db      	lsrs	r3, r3, #3
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	4a84      	ldr	r2, [pc, #528]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
 8003b44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	ee07 3a90 	vmov	s15, r3
 8003b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b5e:	4b7b      	ldr	r3, [pc, #492]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b8e:	e087      	b.n	8003ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba2:	4b6a      	ldr	r3, [pc, #424]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bd2:	e065      	b.n	8003ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003be6:	4b59      	ldr	r3, [pc, #356]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c16:	e043      	b.n	8003ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2a:	4b48      	ldr	r3, [pc, #288]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c5a:	e021      	b.n	8003ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	0a5b      	lsrs	r3, r3, #9
 8003ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc6:	ee17 2a90 	vmov	r2, s15
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003cce:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd8:	ee07 3a90 	vmov	s15, r3
 8003cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf4:	ee17 2a90 	vmov	r2, s15
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003cfc:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	0e1b      	lsrs	r3, r3, #24
 8003d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d22:	ee17 2a90 	vmov	r2, s15
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d2a:	e008      	b.n	8003d3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	609a      	str	r2, [r3, #8]
}
 8003d3e:	bf00      	nop
 8003d40:	3724      	adds	r7, #36	; 0x24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	03d09000 	.word	0x03d09000
 8003d54:	46000000 	.word	0x46000000
 8003d58:	4c742400 	.word	0x4c742400
 8003d5c:	4a742400 	.word	0x4a742400
 8003d60:	4af42400 	.word	0x4af42400

08003d64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b089      	sub	sp, #36	; 0x24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d6c:	4ba1      	ldr	r3, [pc, #644]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003d76:	4b9f      	ldr	r3, [pc, #636]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	0d1b      	lsrs	r3, r3, #20
 8003d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d82:	4b9c      	ldr	r3, [pc, #624]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003d8e:	4b99      	ldr	r3, [pc, #612]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	08db      	lsrs	r3, r3, #3
 8003d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8111 	beq.w	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	f000 8083 	beq.w	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	f200 80a1 	bhi.w	8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d056      	beq.n	8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003dce:	e099      	b.n	8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dd0:	4b88      	ldr	r3, [pc, #544]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d02d      	beq.n	8003e38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ddc:	4b85      	ldr	r3, [pc, #532]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	08db      	lsrs	r3, r3, #3
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	4a84      	ldr	r2, [pc, #528]	; (8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e06:	4b7b      	ldr	r3, [pc, #492]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003e36:	e087      	b.n	8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4a:	4b6a      	ldr	r3, [pc, #424]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e7a:	e065      	b.n	8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e8e:	4b59      	ldr	r3, [pc, #356]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ebe:	e043      	b.n	8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed2:	4b48      	ldr	r3, [pc, #288]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ee6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f02:	e021      	b.n	8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f16:	4b37      	ldr	r3, [pc, #220]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003f48:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	0a5b      	lsrs	r3, r3, #9
 8003f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f6e:	ee17 2a90 	vmov	r2, s15
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003f76:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	0c1b      	lsrs	r3, r3, #16
 8003f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f80:	ee07 3a90 	vmov	s15, r3
 8003f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9c:	ee17 2a90 	vmov	r2, s15
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	0e1b      	lsrs	r3, r3, #24
 8003faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fca:	ee17 2a90 	vmov	r2, s15
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
}
 8003fe6:	bf00      	nop
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	03d09000 	.word	0x03d09000
 8003ffc:	46000000 	.word	0x46000000
 8004000:	4c742400 	.word	0x4c742400
 8004004:	4a742400 	.word	0x4a742400
 8004008:	4af42400 	.word	0x4af42400

0800400c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800401a:	4b53      	ldr	r3, [pc, #332]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b03      	cmp	r3, #3
 8004024:	d101      	bne.n	800402a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e099      	b.n	800415e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800402a:	4b4f      	ldr	r3, [pc, #316]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a4e      	ldr	r2, [pc, #312]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 8004030:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004036:	f7fc ffd3 	bl	8000fe0 <HAL_GetTick>
 800403a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800403c:	e008      	b.n	8004050 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800403e:	f7fc ffcf 	bl	8000fe0 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e086      	b.n	800415e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004050:	4b45      	ldr	r3, [pc, #276]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f0      	bne.n	800403e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800405c:	4b42      	ldr	r3, [pc, #264]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	031b      	lsls	r3, r3, #12
 800406a:	493f      	ldr	r1, [pc, #252]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 800406c:	4313      	orrs	r3, r2
 800406e:	628b      	str	r3, [r1, #40]	; 0x28
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	3b01      	subs	r3, #1
 8004076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	3b01      	subs	r3, #1
 8004080:	025b      	lsls	r3, r3, #9
 8004082:	b29b      	uxth	r3, r3
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	3b01      	subs	r3, #1
 800408c:	041b      	lsls	r3, r3, #16
 800408e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	3b01      	subs	r3, #1
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040a0:	4931      	ldr	r1, [pc, #196]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040a6:	4b30      	ldr	r3, [pc, #192]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	492d      	ldr	r1, [pc, #180]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	f023 0220 	bic.w	r2, r3, #32
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	4928      	ldr	r1, [pc, #160]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040ca:	4b27      	ldr	r3, [pc, #156]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	4a26      	ldr	r2, [pc, #152]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040d0:	f023 0310 	bic.w	r3, r3, #16
 80040d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <RCCEx_PLL2_Config+0x160>)
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	69d2      	ldr	r2, [r2, #28]
 80040e2:	00d2      	lsls	r2, r2, #3
 80040e4:	4920      	ldr	r1, [pc, #128]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80040ea:	4b1f      	ldr	r3, [pc, #124]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	4a1e      	ldr	r2, [pc, #120]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040f0:	f043 0310 	orr.w	r3, r3, #16
 80040f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80040fc:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	4a19      	ldr	r2, [pc, #100]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 8004102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004108:	e00f      	b.n	800412a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d106      	bne.n	800411e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004110:	4b15      	ldr	r3, [pc, #84]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	4a14      	ldr	r2, [pc, #80]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 8004116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800411a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800411c:	e005      	b.n	800412a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	4a11      	ldr	r2, [pc, #68]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 8004124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004128:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800412a:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a0e      	ldr	r2, [pc, #56]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 8004130:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004136:	f7fc ff53 	bl	8000fe0 <HAL_GetTick>
 800413a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800413c:	e008      	b.n	8004150 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800413e:	f7fc ff4f 	bl	8000fe0 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e006      	b.n	800415e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <RCCEx_PLL2_Config+0x15c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	58024400 	.word	0x58024400
 800416c:	ffff0007 	.word	0xffff0007

08004170 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800417e:	4b53      	ldr	r3, [pc, #332]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b03      	cmp	r3, #3
 8004188:	d101      	bne.n	800418e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e099      	b.n	80042c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800418e:	4b4f      	ldr	r3, [pc, #316]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a4e      	ldr	r2, [pc, #312]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419a:	f7fc ff21 	bl	8000fe0 <HAL_GetTick>
 800419e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041a0:	e008      	b.n	80041b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80041a2:	f7fc ff1d 	bl	8000fe0 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e086      	b.n	80042c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041b4:	4b45      	ldr	r3, [pc, #276]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f0      	bne.n	80041a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041c0:	4b42      	ldr	r3, [pc, #264]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	051b      	lsls	r3, r3, #20
 80041ce:	493f      	ldr	r1, [pc, #252]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	628b      	str	r3, [r1, #40]	; 0x28
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	3b01      	subs	r3, #1
 80041da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	025b      	lsls	r3, r3, #9
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	041b      	lsls	r3, r3, #16
 80041f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	061b      	lsls	r3, r3, #24
 8004200:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004204:	4931      	ldr	r1, [pc, #196]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800420a:	4b30      	ldr	r3, [pc, #192]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	492d      	ldr	r1, [pc, #180]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800421c:	4b2b      	ldr	r3, [pc, #172]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	4928      	ldr	r1, [pc, #160]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800422e:	4b27      	ldr	r3, [pc, #156]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	4a26      	ldr	r2, [pc, #152]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800423a:	4b24      	ldr	r3, [pc, #144]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 800423c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800423e:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <RCCEx_PLL3_Config+0x160>)
 8004240:	4013      	ands	r3, r2
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	69d2      	ldr	r2, [r2, #28]
 8004246:	00d2      	lsls	r2, r2, #3
 8004248:	4920      	ldr	r1, [pc, #128]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 800424a:	4313      	orrs	r3, r2
 800424c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800424e:	4b1f      	ldr	r3, [pc, #124]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004258:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004260:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004266:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800426a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800426c:	e00f      	b.n	800428e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d106      	bne.n	8004282 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004274:	4b15      	ldr	r3, [pc, #84]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 800427a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800427e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004280:	e005      	b.n	800428e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004282:	4b12      	ldr	r3, [pc, #72]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	4a11      	ldr	r2, [pc, #68]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a0e      	ldr	r2, [pc, #56]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429a:	f7fc fea1 	bl	8000fe0 <HAL_GetTick>
 800429e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042a0:	e008      	b.n	80042b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80042a2:	f7fc fe9d 	bl	8000fe0 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e006      	b.n	80042c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <RCCEx_PLL3_Config+0x15c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	58024400 	.word	0x58024400
 80042d0:	ffff0007 	.word	0xffff0007

080042d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e042      	b.n	800436c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fc fcb9 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2224      	movs	r2, #36	; 0x24
 8004302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f82c 	bl	8004374 <UART_SetConfig>
 800431c:	4603      	mov	r3, r0
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e022      	b.n	800436c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fe8c 	bl	800504c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004342:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004352:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 ff13 	bl	8005190 <UART_CheckIdleState>
 800436a:	4603      	mov	r3, r0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004378:	b092      	sub	sp, #72	; 0x48
 800437a:	af00      	add	r7, sp, #0
 800437c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	431a      	orrs	r2, r3
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	431a      	orrs	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	4313      	orrs	r3, r2
 800439a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4bbe      	ldr	r3, [pc, #760]	; (800469c <UART_SetConfig+0x328>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4ab3      	ldr	r2, [pc, #716]	; (80046a0 <UART_SetConfig+0x32c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043dc:	4313      	orrs	r3, r2
 80043de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	4baf      	ldr	r3, [pc, #700]	; (80046a4 <UART_SetConfig+0x330>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	6812      	ldr	r2, [r2, #0]
 80043ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043f0:	430b      	orrs	r3, r1
 80043f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	f023 010f 	bic.w	r1, r3, #15
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4aa6      	ldr	r2, [pc, #664]	; (80046a8 <UART_SetConfig+0x334>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d177      	bne.n	8004504 <UART_SetConfig+0x190>
 8004414:	4ba5      	ldr	r3, [pc, #660]	; (80046ac <UART_SetConfig+0x338>)
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800441c:	2b28      	cmp	r3, #40	; 0x28
 800441e:	d86d      	bhi.n	80044fc <UART_SetConfig+0x188>
 8004420:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <UART_SetConfig+0xb4>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	080044cd 	.word	0x080044cd
 800442c:	080044fd 	.word	0x080044fd
 8004430:	080044fd 	.word	0x080044fd
 8004434:	080044fd 	.word	0x080044fd
 8004438:	080044fd 	.word	0x080044fd
 800443c:	080044fd 	.word	0x080044fd
 8004440:	080044fd 	.word	0x080044fd
 8004444:	080044fd 	.word	0x080044fd
 8004448:	080044d5 	.word	0x080044d5
 800444c:	080044fd 	.word	0x080044fd
 8004450:	080044fd 	.word	0x080044fd
 8004454:	080044fd 	.word	0x080044fd
 8004458:	080044fd 	.word	0x080044fd
 800445c:	080044fd 	.word	0x080044fd
 8004460:	080044fd 	.word	0x080044fd
 8004464:	080044fd 	.word	0x080044fd
 8004468:	080044dd 	.word	0x080044dd
 800446c:	080044fd 	.word	0x080044fd
 8004470:	080044fd 	.word	0x080044fd
 8004474:	080044fd 	.word	0x080044fd
 8004478:	080044fd 	.word	0x080044fd
 800447c:	080044fd 	.word	0x080044fd
 8004480:	080044fd 	.word	0x080044fd
 8004484:	080044fd 	.word	0x080044fd
 8004488:	080044e5 	.word	0x080044e5
 800448c:	080044fd 	.word	0x080044fd
 8004490:	080044fd 	.word	0x080044fd
 8004494:	080044fd 	.word	0x080044fd
 8004498:	080044fd 	.word	0x080044fd
 800449c:	080044fd 	.word	0x080044fd
 80044a0:	080044fd 	.word	0x080044fd
 80044a4:	080044fd 	.word	0x080044fd
 80044a8:	080044ed 	.word	0x080044ed
 80044ac:	080044fd 	.word	0x080044fd
 80044b0:	080044fd 	.word	0x080044fd
 80044b4:	080044fd 	.word	0x080044fd
 80044b8:	080044fd 	.word	0x080044fd
 80044bc:	080044fd 	.word	0x080044fd
 80044c0:	080044fd 	.word	0x080044fd
 80044c4:	080044fd 	.word	0x080044fd
 80044c8:	080044f5 	.word	0x080044f5
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044d2:	e326      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80044d4:	2304      	movs	r3, #4
 80044d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044da:	e322      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e2:	e31e      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ea:	e31a      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80044ec:	2320      	movs	r3, #32
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f2:	e316      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80044f4:	2340      	movs	r3, #64	; 0x40
 80044f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fa:	e312      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004502:	e30e      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a69      	ldr	r2, [pc, #420]	; (80046b0 <UART_SetConfig+0x33c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d130      	bne.n	8004570 <UART_SetConfig+0x1fc>
 800450e:	4b67      	ldr	r3, [pc, #412]	; (80046ac <UART_SetConfig+0x338>)
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	2b05      	cmp	r3, #5
 8004518:	d826      	bhi.n	8004568 <UART_SetConfig+0x1f4>
 800451a:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <UART_SetConfig+0x1ac>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004539 	.word	0x08004539
 8004524:	08004541 	.word	0x08004541
 8004528:	08004549 	.word	0x08004549
 800452c:	08004551 	.word	0x08004551
 8004530:	08004559 	.word	0x08004559
 8004534:	08004561 	.word	0x08004561
 8004538:	2300      	movs	r3, #0
 800453a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800453e:	e2f0      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004540:	2304      	movs	r3, #4
 8004542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004546:	e2ec      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004548:	2308      	movs	r3, #8
 800454a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454e:	e2e8      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004550:	2310      	movs	r3, #16
 8004552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004556:	e2e4      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004558:	2320      	movs	r3, #32
 800455a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800455e:	e2e0      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004560:	2340      	movs	r3, #64	; 0x40
 8004562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004566:	e2dc      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800456e:	e2d8      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a4f      	ldr	r2, [pc, #316]	; (80046b4 <UART_SetConfig+0x340>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d130      	bne.n	80045dc <UART_SetConfig+0x268>
 800457a:	4b4c      	ldr	r3, [pc, #304]	; (80046ac <UART_SetConfig+0x338>)
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	2b05      	cmp	r3, #5
 8004584:	d826      	bhi.n	80045d4 <UART_SetConfig+0x260>
 8004586:	a201      	add	r2, pc, #4	; (adr r2, 800458c <UART_SetConfig+0x218>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045a5 	.word	0x080045a5
 8004590:	080045ad 	.word	0x080045ad
 8004594:	080045b5 	.word	0x080045b5
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	2300      	movs	r3, #0
 80045a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045aa:	e2ba      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80045ac:	2304      	movs	r3, #4
 80045ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045b2:	e2b6      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80045b4:	2308      	movs	r3, #8
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ba:	e2b2      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80045bc:	2310      	movs	r3, #16
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c2:	e2ae      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80045c4:	2320      	movs	r3, #32
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ca:	e2aa      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80045cc:	2340      	movs	r3, #64	; 0x40
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d2:	e2a6      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045da:	e2a2      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a35      	ldr	r2, [pc, #212]	; (80046b8 <UART_SetConfig+0x344>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d130      	bne.n	8004648 <UART_SetConfig+0x2d4>
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <UART_SetConfig+0x338>)
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d826      	bhi.n	8004640 <UART_SetConfig+0x2cc>
 80045f2:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <UART_SetConfig+0x284>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	08004611 	.word	0x08004611
 80045fc:	08004619 	.word	0x08004619
 8004600:	08004621 	.word	0x08004621
 8004604:	08004629 	.word	0x08004629
 8004608:	08004631 	.word	0x08004631
 800460c:	08004639 	.word	0x08004639
 8004610:	2300      	movs	r3, #0
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004616:	e284      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004618:	2304      	movs	r3, #4
 800461a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461e:	e280      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004620:	2308      	movs	r3, #8
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004626:	e27c      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004628:	2310      	movs	r3, #16
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462e:	e278      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004630:	2320      	movs	r3, #32
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004636:	e274      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004638:	2340      	movs	r3, #64	; 0x40
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463e:	e270      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004640:	2380      	movs	r3, #128	; 0x80
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004646:	e26c      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <UART_SetConfig+0x348>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d142      	bne.n	80046d8 <UART_SetConfig+0x364>
 8004652:	4b16      	ldr	r3, [pc, #88]	; (80046ac <UART_SetConfig+0x338>)
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	2b05      	cmp	r3, #5
 800465c:	d838      	bhi.n	80046d0 <UART_SetConfig+0x35c>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <UART_SetConfig+0x2f0>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	0800467d 	.word	0x0800467d
 8004668:	08004685 	.word	0x08004685
 800466c:	0800468d 	.word	0x0800468d
 8004670:	08004695 	.word	0x08004695
 8004674:	080046c1 	.word	0x080046c1
 8004678:	080046c9 	.word	0x080046c9
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004682:	e24e      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004684:	2304      	movs	r3, #4
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468a:	e24a      	b.n	8004b22 <UART_SetConfig+0x7ae>
 800468c:	2308      	movs	r3, #8
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004692:	e246      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004694:	2310      	movs	r3, #16
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469a:	e242      	b.n	8004b22 <UART_SetConfig+0x7ae>
 800469c:	cfff69f3 	.word	0xcfff69f3
 80046a0:	58000c00 	.word	0x58000c00
 80046a4:	11fff4ff 	.word	0x11fff4ff
 80046a8:	40011000 	.word	0x40011000
 80046ac:	58024400 	.word	0x58024400
 80046b0:	40004400 	.word	0x40004400
 80046b4:	40004800 	.word	0x40004800
 80046b8:	40004c00 	.word	0x40004c00
 80046bc:	40005000 	.word	0x40005000
 80046c0:	2320      	movs	r3, #32
 80046c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c6:	e22c      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80046c8:	2340      	movs	r3, #64	; 0x40
 80046ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ce:	e228      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d6:	e224      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4ab1      	ldr	r2, [pc, #708]	; (80049a4 <UART_SetConfig+0x630>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d176      	bne.n	80047d0 <UART_SetConfig+0x45c>
 80046e2:	4bb1      	ldr	r3, [pc, #708]	; (80049a8 <UART_SetConfig+0x634>)
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ea:	2b28      	cmp	r3, #40	; 0x28
 80046ec:	d86c      	bhi.n	80047c8 <UART_SetConfig+0x454>
 80046ee:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <UART_SetConfig+0x380>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004799 	.word	0x08004799
 80046f8:	080047c9 	.word	0x080047c9
 80046fc:	080047c9 	.word	0x080047c9
 8004700:	080047c9 	.word	0x080047c9
 8004704:	080047c9 	.word	0x080047c9
 8004708:	080047c9 	.word	0x080047c9
 800470c:	080047c9 	.word	0x080047c9
 8004710:	080047c9 	.word	0x080047c9
 8004714:	080047a1 	.word	0x080047a1
 8004718:	080047c9 	.word	0x080047c9
 800471c:	080047c9 	.word	0x080047c9
 8004720:	080047c9 	.word	0x080047c9
 8004724:	080047c9 	.word	0x080047c9
 8004728:	080047c9 	.word	0x080047c9
 800472c:	080047c9 	.word	0x080047c9
 8004730:	080047c9 	.word	0x080047c9
 8004734:	080047a9 	.word	0x080047a9
 8004738:	080047c9 	.word	0x080047c9
 800473c:	080047c9 	.word	0x080047c9
 8004740:	080047c9 	.word	0x080047c9
 8004744:	080047c9 	.word	0x080047c9
 8004748:	080047c9 	.word	0x080047c9
 800474c:	080047c9 	.word	0x080047c9
 8004750:	080047c9 	.word	0x080047c9
 8004754:	080047b1 	.word	0x080047b1
 8004758:	080047c9 	.word	0x080047c9
 800475c:	080047c9 	.word	0x080047c9
 8004760:	080047c9 	.word	0x080047c9
 8004764:	080047c9 	.word	0x080047c9
 8004768:	080047c9 	.word	0x080047c9
 800476c:	080047c9 	.word	0x080047c9
 8004770:	080047c9 	.word	0x080047c9
 8004774:	080047b9 	.word	0x080047b9
 8004778:	080047c9 	.word	0x080047c9
 800477c:	080047c9 	.word	0x080047c9
 8004780:	080047c9 	.word	0x080047c9
 8004784:	080047c9 	.word	0x080047c9
 8004788:	080047c9 	.word	0x080047c9
 800478c:	080047c9 	.word	0x080047c9
 8004790:	080047c9 	.word	0x080047c9
 8004794:	080047c1 	.word	0x080047c1
 8004798:	2301      	movs	r3, #1
 800479a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479e:	e1c0      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80047a0:	2304      	movs	r3, #4
 80047a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a6:	e1bc      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80047a8:	2308      	movs	r3, #8
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ae:	e1b8      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b6:	e1b4      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80047b8:	2320      	movs	r3, #32
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047be:	e1b0      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80047c0:	2340      	movs	r3, #64	; 0x40
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047c6:	e1ac      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e1a8      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a75      	ldr	r2, [pc, #468]	; (80049ac <UART_SetConfig+0x638>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d130      	bne.n	800483c <UART_SetConfig+0x4c8>
 80047da:	4b73      	ldr	r3, [pc, #460]	; (80049a8 <UART_SetConfig+0x634>)
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d826      	bhi.n	8004834 <UART_SetConfig+0x4c0>
 80047e6:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <UART_SetConfig+0x478>)
 80047e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ec:	08004805 	.word	0x08004805
 80047f0:	0800480d 	.word	0x0800480d
 80047f4:	08004815 	.word	0x08004815
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004825 	.word	0x08004825
 8004800:	0800482d 	.word	0x0800482d
 8004804:	2300      	movs	r3, #0
 8004806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800480a:	e18a      	b.n	8004b22 <UART_SetConfig+0x7ae>
 800480c:	2304      	movs	r3, #4
 800480e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004812:	e186      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004814:	2308      	movs	r3, #8
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800481a:	e182      	b.n	8004b22 <UART_SetConfig+0x7ae>
 800481c:	2310      	movs	r3, #16
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004822:	e17e      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004824:	2320      	movs	r3, #32
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800482a:	e17a      	b.n	8004b22 <UART_SetConfig+0x7ae>
 800482c:	2340      	movs	r3, #64	; 0x40
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004832:	e176      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483a:	e172      	b.n	8004b22 <UART_SetConfig+0x7ae>
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a5b      	ldr	r2, [pc, #364]	; (80049b0 <UART_SetConfig+0x63c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d130      	bne.n	80048a8 <UART_SetConfig+0x534>
 8004846:	4b58      	ldr	r3, [pc, #352]	; (80049a8 <UART_SetConfig+0x634>)
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	2b05      	cmp	r3, #5
 8004850:	d826      	bhi.n	80048a0 <UART_SetConfig+0x52c>
 8004852:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <UART_SetConfig+0x4e4>)
 8004854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004858:	08004871 	.word	0x08004871
 800485c:	08004879 	.word	0x08004879
 8004860:	08004881 	.word	0x08004881
 8004864:	08004889 	.word	0x08004889
 8004868:	08004891 	.word	0x08004891
 800486c:	08004899 	.word	0x08004899
 8004870:	2300      	movs	r3, #0
 8004872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004876:	e154      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004878:	2304      	movs	r3, #4
 800487a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800487e:	e150      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004880:	2308      	movs	r3, #8
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004886:	e14c      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004888:	2310      	movs	r3, #16
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488e:	e148      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004890:	2320      	movs	r3, #32
 8004892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004896:	e144      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004898:	2340      	movs	r3, #64	; 0x40
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489e:	e140      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80048a0:	2380      	movs	r3, #128	; 0x80
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a6:	e13c      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a41      	ldr	r2, [pc, #260]	; (80049b4 <UART_SetConfig+0x640>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	f040 8082 	bne.w	80049b8 <UART_SetConfig+0x644>
 80048b4:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <UART_SetConfig+0x634>)
 80048b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048bc:	2b28      	cmp	r3, #40	; 0x28
 80048be:	d86d      	bhi.n	800499c <UART_SetConfig+0x628>
 80048c0:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <UART_SetConfig+0x554>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	0800496d 	.word	0x0800496d
 80048cc:	0800499d 	.word	0x0800499d
 80048d0:	0800499d 	.word	0x0800499d
 80048d4:	0800499d 	.word	0x0800499d
 80048d8:	0800499d 	.word	0x0800499d
 80048dc:	0800499d 	.word	0x0800499d
 80048e0:	0800499d 	.word	0x0800499d
 80048e4:	0800499d 	.word	0x0800499d
 80048e8:	08004975 	.word	0x08004975
 80048ec:	0800499d 	.word	0x0800499d
 80048f0:	0800499d 	.word	0x0800499d
 80048f4:	0800499d 	.word	0x0800499d
 80048f8:	0800499d 	.word	0x0800499d
 80048fc:	0800499d 	.word	0x0800499d
 8004900:	0800499d 	.word	0x0800499d
 8004904:	0800499d 	.word	0x0800499d
 8004908:	0800497d 	.word	0x0800497d
 800490c:	0800499d 	.word	0x0800499d
 8004910:	0800499d 	.word	0x0800499d
 8004914:	0800499d 	.word	0x0800499d
 8004918:	0800499d 	.word	0x0800499d
 800491c:	0800499d 	.word	0x0800499d
 8004920:	0800499d 	.word	0x0800499d
 8004924:	0800499d 	.word	0x0800499d
 8004928:	08004985 	.word	0x08004985
 800492c:	0800499d 	.word	0x0800499d
 8004930:	0800499d 	.word	0x0800499d
 8004934:	0800499d 	.word	0x0800499d
 8004938:	0800499d 	.word	0x0800499d
 800493c:	0800499d 	.word	0x0800499d
 8004940:	0800499d 	.word	0x0800499d
 8004944:	0800499d 	.word	0x0800499d
 8004948:	0800498d 	.word	0x0800498d
 800494c:	0800499d 	.word	0x0800499d
 8004950:	0800499d 	.word	0x0800499d
 8004954:	0800499d 	.word	0x0800499d
 8004958:	0800499d 	.word	0x0800499d
 800495c:	0800499d 	.word	0x0800499d
 8004960:	0800499d 	.word	0x0800499d
 8004964:	0800499d 	.word	0x0800499d
 8004968:	08004995 	.word	0x08004995
 800496c:	2301      	movs	r3, #1
 800496e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004972:	e0d6      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004974:	2304      	movs	r3, #4
 8004976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800497a:	e0d2      	b.n	8004b22 <UART_SetConfig+0x7ae>
 800497c:	2308      	movs	r3, #8
 800497e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004982:	e0ce      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004984:	2310      	movs	r3, #16
 8004986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800498a:	e0ca      	b.n	8004b22 <UART_SetConfig+0x7ae>
 800498c:	2320      	movs	r3, #32
 800498e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004992:	e0c6      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004994:	2340      	movs	r3, #64	; 0x40
 8004996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499a:	e0c2      	b.n	8004b22 <UART_SetConfig+0x7ae>
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a2:	e0be      	b.n	8004b22 <UART_SetConfig+0x7ae>
 80049a4:	40011400 	.word	0x40011400
 80049a8:	58024400 	.word	0x58024400
 80049ac:	40007800 	.word	0x40007800
 80049b0:	40007c00 	.word	0x40007c00
 80049b4:	40011800 	.word	0x40011800
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4aad      	ldr	r2, [pc, #692]	; (8004c74 <UART_SetConfig+0x900>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d176      	bne.n	8004ab0 <UART_SetConfig+0x73c>
 80049c2:	4bad      	ldr	r3, [pc, #692]	; (8004c78 <UART_SetConfig+0x904>)
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049ca:	2b28      	cmp	r3, #40	; 0x28
 80049cc:	d86c      	bhi.n	8004aa8 <UART_SetConfig+0x734>
 80049ce:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0x660>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	08004a79 	.word	0x08004a79
 80049d8:	08004aa9 	.word	0x08004aa9
 80049dc:	08004aa9 	.word	0x08004aa9
 80049e0:	08004aa9 	.word	0x08004aa9
 80049e4:	08004aa9 	.word	0x08004aa9
 80049e8:	08004aa9 	.word	0x08004aa9
 80049ec:	08004aa9 	.word	0x08004aa9
 80049f0:	08004aa9 	.word	0x08004aa9
 80049f4:	08004a81 	.word	0x08004a81
 80049f8:	08004aa9 	.word	0x08004aa9
 80049fc:	08004aa9 	.word	0x08004aa9
 8004a00:	08004aa9 	.word	0x08004aa9
 8004a04:	08004aa9 	.word	0x08004aa9
 8004a08:	08004aa9 	.word	0x08004aa9
 8004a0c:	08004aa9 	.word	0x08004aa9
 8004a10:	08004aa9 	.word	0x08004aa9
 8004a14:	08004a89 	.word	0x08004a89
 8004a18:	08004aa9 	.word	0x08004aa9
 8004a1c:	08004aa9 	.word	0x08004aa9
 8004a20:	08004aa9 	.word	0x08004aa9
 8004a24:	08004aa9 	.word	0x08004aa9
 8004a28:	08004aa9 	.word	0x08004aa9
 8004a2c:	08004aa9 	.word	0x08004aa9
 8004a30:	08004aa9 	.word	0x08004aa9
 8004a34:	08004a91 	.word	0x08004a91
 8004a38:	08004aa9 	.word	0x08004aa9
 8004a3c:	08004aa9 	.word	0x08004aa9
 8004a40:	08004aa9 	.word	0x08004aa9
 8004a44:	08004aa9 	.word	0x08004aa9
 8004a48:	08004aa9 	.word	0x08004aa9
 8004a4c:	08004aa9 	.word	0x08004aa9
 8004a50:	08004aa9 	.word	0x08004aa9
 8004a54:	08004a99 	.word	0x08004a99
 8004a58:	08004aa9 	.word	0x08004aa9
 8004a5c:	08004aa9 	.word	0x08004aa9
 8004a60:	08004aa9 	.word	0x08004aa9
 8004a64:	08004aa9 	.word	0x08004aa9
 8004a68:	08004aa9 	.word	0x08004aa9
 8004a6c:	08004aa9 	.word	0x08004aa9
 8004a70:	08004aa9 	.word	0x08004aa9
 8004a74:	08004aa1 	.word	0x08004aa1
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7e:	e050      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004a80:	2304      	movs	r3, #4
 8004a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a86:	e04c      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004a88:	2308      	movs	r3, #8
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8e:	e048      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004a90:	2310      	movs	r3, #16
 8004a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a96:	e044      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004a98:	2320      	movs	r3, #32
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9e:	e040      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004aa0:	2340      	movs	r3, #64	; 0x40
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa6:	e03c      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aae:	e038      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a71      	ldr	r2, [pc, #452]	; (8004c7c <UART_SetConfig+0x908>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d130      	bne.n	8004b1c <UART_SetConfig+0x7a8>
 8004aba:	4b6f      	ldr	r3, [pc, #444]	; (8004c78 <UART_SetConfig+0x904>)
 8004abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	2b05      	cmp	r3, #5
 8004ac4:	d826      	bhi.n	8004b14 <UART_SetConfig+0x7a0>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0x758>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004ae5 	.word	0x08004ae5
 8004ad0:	08004aed 	.word	0x08004aed
 8004ad4:	08004af5 	.word	0x08004af5
 8004ad8:	08004afd 	.word	0x08004afd
 8004adc:	08004b05 	.word	0x08004b05
 8004ae0:	08004b0d 	.word	0x08004b0d
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aea:	e01a      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004aec:	2304      	movs	r3, #4
 8004aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004af2:	e016      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004af4:	2308      	movs	r3, #8
 8004af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afa:	e012      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004afc:	2310      	movs	r3, #16
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b02:	e00e      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004b04:	2320      	movs	r3, #32
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0a:	e00a      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004b0c:	2340      	movs	r3, #64	; 0x40
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b12:	e006      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b1a:	e002      	b.n	8004b22 <UART_SetConfig+0x7ae>
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a55      	ldr	r2, [pc, #340]	; (8004c7c <UART_SetConfig+0x908>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	f040 80f8 	bne.w	8004d1e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	dc46      	bgt.n	8004bc4 <UART_SetConfig+0x850>
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	db75      	blt.n	8004c26 <UART_SetConfig+0x8b2>
 8004b3a:	3b02      	subs	r3, #2
 8004b3c:	2b1e      	cmp	r3, #30
 8004b3e:	d872      	bhi.n	8004c26 <UART_SetConfig+0x8b2>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x7d4>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004bcb 	.word	0x08004bcb
 8004b4c:	08004c27 	.word	0x08004c27
 8004b50:	08004bd3 	.word	0x08004bd3
 8004b54:	08004c27 	.word	0x08004c27
 8004b58:	08004c27 	.word	0x08004c27
 8004b5c:	08004c27 	.word	0x08004c27
 8004b60:	08004be3 	.word	0x08004be3
 8004b64:	08004c27 	.word	0x08004c27
 8004b68:	08004c27 	.word	0x08004c27
 8004b6c:	08004c27 	.word	0x08004c27
 8004b70:	08004c27 	.word	0x08004c27
 8004b74:	08004c27 	.word	0x08004c27
 8004b78:	08004c27 	.word	0x08004c27
 8004b7c:	08004c27 	.word	0x08004c27
 8004b80:	08004bf3 	.word	0x08004bf3
 8004b84:	08004c27 	.word	0x08004c27
 8004b88:	08004c27 	.word	0x08004c27
 8004b8c:	08004c27 	.word	0x08004c27
 8004b90:	08004c27 	.word	0x08004c27
 8004b94:	08004c27 	.word	0x08004c27
 8004b98:	08004c27 	.word	0x08004c27
 8004b9c:	08004c27 	.word	0x08004c27
 8004ba0:	08004c27 	.word	0x08004c27
 8004ba4:	08004c27 	.word	0x08004c27
 8004ba8:	08004c27 	.word	0x08004c27
 8004bac:	08004c27 	.word	0x08004c27
 8004bb0:	08004c27 	.word	0x08004c27
 8004bb4:	08004c27 	.word	0x08004c27
 8004bb8:	08004c27 	.word	0x08004c27
 8004bbc:	08004c27 	.word	0x08004c27
 8004bc0:	08004c19 	.word	0x08004c19
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d02a      	beq.n	8004c1e <UART_SetConfig+0x8aa>
 8004bc8:	e02d      	b.n	8004c26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004bca:	f7fe ff61 	bl	8003a90 <HAL_RCCEx_GetD3PCLK1Freq>
 8004bce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004bd0:	e02f      	b.n	8004c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe ff70 	bl	8003abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004be0:	e027      	b.n	8004c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004be2:	f107 0318 	add.w	r3, r7, #24
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff f8bc 	bl	8003d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bf0:	e01f      	b.n	8004c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bf2:	4b21      	ldr	r3, [pc, #132]	; (8004c78 <UART_SetConfig+0x904>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <UART_SetConfig+0x904>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	08db      	lsrs	r3, r3, #3
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	4a1d      	ldr	r2, [pc, #116]	; (8004c80 <UART_SetConfig+0x90c>)
 8004c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c10:	e00f      	b.n	8004c32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004c12:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <UART_SetConfig+0x90c>)
 8004c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c16:	e00c      	b.n	8004c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c18:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <UART_SetConfig+0x910>)
 8004c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c1c:	e009      	b.n	8004c32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c24:	e005      	b.n	8004c32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004c30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 81ee 	beq.w	8005016 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <UART_SetConfig+0x914>)
 8004c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c44:	461a      	mov	r2, r3
 8004c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c4c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4413      	add	r3, r2
 8004c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d305      	bcc.n	8004c6a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d910      	bls.n	8004c8c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004c70:	e1d1      	b.n	8005016 <UART_SetConfig+0xca2>
 8004c72:	bf00      	nop
 8004c74:	40011c00 	.word	0x40011c00
 8004c78:	58024400 	.word	0x58024400
 8004c7c:	58000c00 	.word	0x58000c00
 8004c80:	03d09000 	.word	0x03d09000
 8004c84:	003d0900 	.word	0x003d0900
 8004c88:	08005880 	.word	0x08005880
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c8e:	2200      	movs	r2, #0
 8004c90:	60bb      	str	r3, [r7, #8]
 8004c92:	60fa      	str	r2, [r7, #12]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	4ac0      	ldr	r2, [pc, #768]	; (8004f9c <UART_SetConfig+0xc28>)
 8004c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	607a      	str	r2, [r7, #4]
 8004ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004caa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cae:	f7fb fb2d 	bl	800030c <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	020b      	lsls	r3, r1, #8
 8004cc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cc8:	0202      	lsls	r2, r0, #8
 8004cca:	6979      	ldr	r1, [r7, #20]
 8004ccc:	6849      	ldr	r1, [r1, #4]
 8004cce:	0849      	lsrs	r1, r1, #1
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	eb12 0804 	adds.w	r8, r2, r4
 8004cda:	eb43 0905 	adc.w	r9, r3, r5
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	469a      	mov	sl, r3
 8004ce6:	4693      	mov	fp, r2
 8004ce8:	4652      	mov	r2, sl
 8004cea:	465b      	mov	r3, fp
 8004cec:	4640      	mov	r0, r8
 8004cee:	4649      	mov	r1, r9
 8004cf0:	f7fb fb0c 	bl	800030c <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d02:	d308      	bcc.n	8004d16 <UART_SetConfig+0x9a2>
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0a:	d204      	bcs.n	8004d16 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d12:	60da      	str	r2, [r3, #12]
 8004d14:	e17f      	b.n	8005016 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004d1c:	e17b      	b.n	8005016 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d26:	f040 80bd 	bne.w	8004ea4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004d2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	dc48      	bgt.n	8004dc4 <UART_SetConfig+0xa50>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	db7b      	blt.n	8004e2e <UART_SetConfig+0xaba>
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d879      	bhi.n	8004e2e <UART_SetConfig+0xaba>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0x9cc>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004dcb 	.word	0x08004dcb
 8004d44:	08004dd3 	.word	0x08004dd3
 8004d48:	08004e2f 	.word	0x08004e2f
 8004d4c:	08004e2f 	.word	0x08004e2f
 8004d50:	08004ddb 	.word	0x08004ddb
 8004d54:	08004e2f 	.word	0x08004e2f
 8004d58:	08004e2f 	.word	0x08004e2f
 8004d5c:	08004e2f 	.word	0x08004e2f
 8004d60:	08004deb 	.word	0x08004deb
 8004d64:	08004e2f 	.word	0x08004e2f
 8004d68:	08004e2f 	.word	0x08004e2f
 8004d6c:	08004e2f 	.word	0x08004e2f
 8004d70:	08004e2f 	.word	0x08004e2f
 8004d74:	08004e2f 	.word	0x08004e2f
 8004d78:	08004e2f 	.word	0x08004e2f
 8004d7c:	08004e2f 	.word	0x08004e2f
 8004d80:	08004dfb 	.word	0x08004dfb
 8004d84:	08004e2f 	.word	0x08004e2f
 8004d88:	08004e2f 	.word	0x08004e2f
 8004d8c:	08004e2f 	.word	0x08004e2f
 8004d90:	08004e2f 	.word	0x08004e2f
 8004d94:	08004e2f 	.word	0x08004e2f
 8004d98:	08004e2f 	.word	0x08004e2f
 8004d9c:	08004e2f 	.word	0x08004e2f
 8004da0:	08004e2f 	.word	0x08004e2f
 8004da4:	08004e2f 	.word	0x08004e2f
 8004da8:	08004e2f 	.word	0x08004e2f
 8004dac:	08004e2f 	.word	0x08004e2f
 8004db0:	08004e2f 	.word	0x08004e2f
 8004db4:	08004e2f 	.word	0x08004e2f
 8004db8:	08004e2f 	.word	0x08004e2f
 8004dbc:	08004e2f 	.word	0x08004e2f
 8004dc0:	08004e21 	.word	0x08004e21
 8004dc4:	2b40      	cmp	r3, #64	; 0x40
 8004dc6:	d02e      	beq.n	8004e26 <UART_SetConfig+0xab2>
 8004dc8:	e031      	b.n	8004e2e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dca:	f7fd ff3b 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 8004dce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004dd0:	e033      	b.n	8004e3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd2:	f7fd ff4d 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 8004dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004dd8:	e02f      	b.n	8004e3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fe6c 	bl	8003abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004de8:	e027      	b.n	8004e3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dea:	f107 0318 	add.w	r3, r7, #24
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fe ffb8 	bl	8003d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004df8:	e01f      	b.n	8004e3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dfa:	4b69      	ldr	r3, [pc, #420]	; (8004fa0 <UART_SetConfig+0xc2c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e06:	4b66      	ldr	r3, [pc, #408]	; (8004fa0 <UART_SetConfig+0xc2c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	08db      	lsrs	r3, r3, #3
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	4a64      	ldr	r2, [pc, #400]	; (8004fa4 <UART_SetConfig+0xc30>)
 8004e12:	fa22 f303 	lsr.w	r3, r2, r3
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e18:	e00f      	b.n	8004e3a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004e1a:	4b62      	ldr	r3, [pc, #392]	; (8004fa4 <UART_SetConfig+0xc30>)
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e1e:	e00c      	b.n	8004e3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e20:	4b61      	ldr	r3, [pc, #388]	; (8004fa8 <UART_SetConfig+0xc34>)
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e24:	e009      	b.n	8004e3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e2c:	e005      	b.n	8004e3a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004e38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80ea 	beq.w	8005016 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	4a55      	ldr	r2, [pc, #340]	; (8004f9c <UART_SetConfig+0xc28>)
 8004e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e54:	005a      	lsls	r2, r3, #1
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	441a      	add	r2, r3
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e66:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	2b0f      	cmp	r3, #15
 8004e6c:	d916      	bls.n	8004e9c <UART_SetConfig+0xb28>
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e74:	d212      	bcs.n	8004e9c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f023 030f 	bic.w	r3, r3, #15
 8004e7e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	e0bc      	b.n	8005016 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ea2:	e0b8      	b.n	8005016 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ea4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	dc4b      	bgt.n	8004f44 <UART_SetConfig+0xbd0>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f2c0 8087 	blt.w	8004fc0 <UART_SetConfig+0xc4c>
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	f200 8084 	bhi.w	8004fc0 <UART_SetConfig+0xc4c>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <UART_SetConfig+0xb4c>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004f4b 	.word	0x08004f4b
 8004ec4:	08004f53 	.word	0x08004f53
 8004ec8:	08004fc1 	.word	0x08004fc1
 8004ecc:	08004fc1 	.word	0x08004fc1
 8004ed0:	08004f5b 	.word	0x08004f5b
 8004ed4:	08004fc1 	.word	0x08004fc1
 8004ed8:	08004fc1 	.word	0x08004fc1
 8004edc:	08004fc1 	.word	0x08004fc1
 8004ee0:	08004f6b 	.word	0x08004f6b
 8004ee4:	08004fc1 	.word	0x08004fc1
 8004ee8:	08004fc1 	.word	0x08004fc1
 8004eec:	08004fc1 	.word	0x08004fc1
 8004ef0:	08004fc1 	.word	0x08004fc1
 8004ef4:	08004fc1 	.word	0x08004fc1
 8004ef8:	08004fc1 	.word	0x08004fc1
 8004efc:	08004fc1 	.word	0x08004fc1
 8004f00:	08004f7b 	.word	0x08004f7b
 8004f04:	08004fc1 	.word	0x08004fc1
 8004f08:	08004fc1 	.word	0x08004fc1
 8004f0c:	08004fc1 	.word	0x08004fc1
 8004f10:	08004fc1 	.word	0x08004fc1
 8004f14:	08004fc1 	.word	0x08004fc1
 8004f18:	08004fc1 	.word	0x08004fc1
 8004f1c:	08004fc1 	.word	0x08004fc1
 8004f20:	08004fc1 	.word	0x08004fc1
 8004f24:	08004fc1 	.word	0x08004fc1
 8004f28:	08004fc1 	.word	0x08004fc1
 8004f2c:	08004fc1 	.word	0x08004fc1
 8004f30:	08004fc1 	.word	0x08004fc1
 8004f34:	08004fc1 	.word	0x08004fc1
 8004f38:	08004fc1 	.word	0x08004fc1
 8004f3c:	08004fc1 	.word	0x08004fc1
 8004f40:	08004fb3 	.word	0x08004fb3
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d037      	beq.n	8004fb8 <UART_SetConfig+0xc44>
 8004f48:	e03a      	b.n	8004fc0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f4a:	f7fd fe7b 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 8004f4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f50:	e03c      	b.n	8004fcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f52:	f7fd fe8d 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 8004f56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f58:	e038      	b.n	8004fcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe fdac 	bl	8003abc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f68:	e030      	b.n	8004fcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f6a:	f107 0318 	add.w	r3, r7, #24
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fef8 	bl	8003d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f78:	e028      	b.n	8004fcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f7a:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <UART_SetConfig+0xc2c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d012      	beq.n	8004fac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <UART_SetConfig+0xc2c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	08db      	lsrs	r3, r3, #3
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <UART_SetConfig+0xc30>)
 8004f92:	fa22 f303 	lsr.w	r3, r2, r3
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f98:	e018      	b.n	8004fcc <UART_SetConfig+0xc58>
 8004f9a:	bf00      	nop
 8004f9c:	08005880 	.word	0x08005880
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	03d09000 	.word	0x03d09000
 8004fa8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004fac:	4b24      	ldr	r3, [pc, #144]	; (8005040 <UART_SetConfig+0xccc>)
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fb0:	e00c      	b.n	8004fcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fb2:	4b24      	ldr	r3, [pc, #144]	; (8005044 <UART_SetConfig+0xcd0>)
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fb6:	e009      	b.n	8004fcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fbe:	e005      	b.n	8004fcc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004fca:	bf00      	nop
    }

    if (pclk != 0U)
 8004fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d021      	beq.n	8005016 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <UART_SetConfig+0xcd4>)
 8004fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe0:	fbb3 f2f2 	udiv	r2, r3, r2
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	441a      	add	r2, r3
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff8:	2b0f      	cmp	r3, #15
 8004ffa:	d909      	bls.n	8005010 <UART_SetConfig+0xc9c>
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005002:	d205      	bcs.n	8005010 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	b29a      	uxth	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	e002      	b.n	8005016 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2201      	movs	r2, #1
 800501a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2201      	movs	r2, #1
 8005022:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2200      	movs	r2, #0
 800502a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2200      	movs	r2, #0
 8005030:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005032:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005036:	4618      	mov	r0, r3
 8005038:	3748      	adds	r7, #72	; 0x48
 800503a:	46bd      	mov	sp, r7
 800503c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005040:	03d09000 	.word	0x03d09000
 8005044:	003d0900 	.word	0x003d0900
 8005048:	08005880 	.word	0x08005880

0800504c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01a      	beq.n	8005162 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800514a:	d10a      	bne.n	8005162 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]
  }
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af02      	add	r7, sp, #8
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051a0:	f7fb ff1e 	bl	8000fe0 <HAL_GetTick>
 80051a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d10e      	bne.n	80051d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f82f 	bl	8005226 <UART_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e025      	b.n	800521e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d10e      	bne.n	80051fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f819 	bl	8005226 <UART_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e00f      	b.n	800521e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b09c      	sub	sp, #112	; 0x70
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	4613      	mov	r3, r2
 8005234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005236:	e0a9      	b.n	800538c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	f000 80a5 	beq.w	800538c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7fb fecd 	bl	8000fe0 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <UART_WaitOnFlagUntilTimeout+0x32>
 8005252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005254:	2b00      	cmp	r3, #0
 8005256:	d140      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005268:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800526c:	667b      	str	r3, [r7, #100]	; 0x64
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005276:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005278:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800527c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e6      	bne.n	8005258 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3308      	adds	r3, #8
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	663b      	str	r3, [r7, #96]	; 0x60
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3308      	adds	r3, #8
 80052a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80052ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e5      	bne.n	800528a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e069      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d051      	beq.n	800538c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f6:	d149      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005300:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005316:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005320:	637b      	str	r3, [r7, #52]	; 0x34
 8005322:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e6      	bne.n	8005302 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	66bb      	str	r3, [r7, #104]	; 0x68
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005354:	623a      	str	r2, [r7, #32]
 8005356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	69f9      	ldr	r1, [r7, #28]
 800535a:	6a3a      	ldr	r2, [r7, #32]
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	61bb      	str	r3, [r7, #24]
   return(result);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e010      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4013      	ands	r3, r2
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	429a      	cmp	r2, r3
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	f43f af46 	beq.w	8005238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3770      	adds	r7, #112	; 0x70
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_UARTEx_DisableFifoMode+0x16>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e027      	b.n	800541c <HAL_UARTEx_DisableFifoMode+0x66>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2224      	movs	r2, #36	; 0x24
 80053d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0201 	bic.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800543c:	2302      	movs	r3, #2
 800543e:	e02d      	b.n	800549c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2224      	movs	r2, #36	; 0x24
 800544c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f84f 	bl	8005520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e02d      	b.n	8005518 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2224      	movs	r2, #36	; 0x24
 80054c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0201 	bic.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f811 	bl	8005520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552c:	2b00      	cmp	r3, #0
 800552e:	d108      	bne.n	8005542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005540:	e031      	b.n	80055a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005542:	2310      	movs	r3, #16
 8005544:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005546:	2310      	movs	r3, #16
 8005548:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	0e5b      	lsrs	r3, r3, #25
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	0f5b      	lsrs	r3, r3, #29
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	7b3a      	ldrb	r2, [r7, #12]
 800556e:	4911      	ldr	r1, [pc, #68]	; (80055b4 <UARTEx_SetNbDataToProcess+0x94>)
 8005570:	5c8a      	ldrb	r2, [r1, r2]
 8005572:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005576:	7b3a      	ldrb	r2, [r7, #12]
 8005578:	490f      	ldr	r1, [pc, #60]	; (80055b8 <UARTEx_SetNbDataToProcess+0x98>)
 800557a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800557c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005580:	b29a      	uxth	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	7b7a      	ldrb	r2, [r7, #13]
 800558c:	4909      	ldr	r1, [pc, #36]	; (80055b4 <UARTEx_SetNbDataToProcess+0x94>)
 800558e:	5c8a      	ldrb	r2, [r1, r2]
 8005590:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005594:	7b7a      	ldrb	r2, [r7, #13]
 8005596:	4908      	ldr	r1, [pc, #32]	; (80055b8 <UARTEx_SetNbDataToProcess+0x98>)
 8005598:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800559a:	fb93 f3f2 	sdiv	r3, r3, r2
 800559e:	b29a      	uxth	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	08005898 	.word	0x08005898
 80055b8:	080058a0 	.word	0x080058a0

080055bc <arm_mat_inverse_f32>:
 80055bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c0:	8843      	ldrh	r3, [r0, #2]
 80055c2:	b087      	sub	sp, #28
 80055c4:	8804      	ldrh	r4, [r0, #0]
 80055c6:	684d      	ldr	r5, [r1, #4]
 80055c8:	429c      	cmp	r4, r3
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80055d0:	9503      	str	r5, [sp, #12]
 80055d2:	f040 80e2 	bne.w	800579a <arm_mat_inverse_f32+0x1de>
 80055d6:	880b      	ldrh	r3, [r1, #0]
 80055d8:	884a      	ldrh	r2, [r1, #2]
 80055da:	429a      	cmp	r2, r3
 80055dc:	f040 80dd 	bne.w	800579a <arm_mat_inverse_f32+0x1de>
 80055e0:	429c      	cmp	r4, r3
 80055e2:	f040 80da 	bne.w	800579a <arm_mat_inverse_f32+0x1de>
 80055e6:	9005      	str	r0, [sp, #20]
 80055e8:	b1fc      	cbz	r4, 800562a <arm_mat_inverse_f32+0x6e>
 80055ea:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 80055ee:	1e66      	subs	r6, r4, #1
 80055f0:	f845 bb04 	str.w	fp, [r5], #4
 80055f4:	d019      	beq.n	800562a <arm_mat_inverse_f32+0x6e>
 80055f6:	2701      	movs	r7, #1
 80055f8:	00b2      	lsls	r2, r6, #2
 80055fa:	4628      	mov	r0, r5
 80055fc:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8005600:	2100      	movs	r1, #0
 8005602:	eb05 0a02 	add.w	sl, r5, r2
 8005606:	f000 f8ff 	bl	8005808 <memset>
 800560a:	4642      	mov	r2, r8
 800560c:	2100      	movs	r1, #0
 800560e:	eb0a 0508 	add.w	r5, sl, r8
 8005612:	4650      	mov	r0, sl
 8005614:	2f00      	cmp	r7, #0
 8005616:	f000 80c5 	beq.w	80057a4 <arm_mat_inverse_f32+0x1e8>
 800561a:	f000 f8f5 	bl	8005808 <memset>
 800561e:	3e01      	subs	r6, #1
 8005620:	f107 0701 	add.w	r7, r7, #1
 8005624:	f845 bb04 	str.w	fp, [r5], #4
 8005628:	d1e6      	bne.n	80055f8 <arm_mat_inverse_f32+0x3c>
 800562a:	9b01      	ldr	r3, [sp, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80af 	beq.w	8005790 <arm_mat_inverse_f32+0x1d4>
 8005632:	009d      	lsls	r5, r3, #2
 8005634:	46cc      	mov	ip, r9
 8005636:	469e      	mov	lr, r3
 8005638:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800563c:	eb0c 0305 	add.w	r3, ip, r5
 8005640:	462f      	mov	r7, r5
 8005642:	2600      	movs	r6, #0
 8005644:	9302      	str	r3, [sp, #8]
 8005646:	1d2b      	adds	r3, r5, #4
 8005648:	9304      	str	r3, [sp, #16]
 800564a:	9b02      	ldr	r3, [sp, #8]
 800564c:	42b4      	cmp	r4, r6
 800564e:	eddc 6a00 	vldr	s13, [ip]
 8005652:	eba3 0b07 	sub.w	fp, r3, r7
 8005656:	f000 809b 	beq.w	8005790 <arm_mat_inverse_f32+0x1d4>
 800565a:	4632      	mov	r2, r6
 800565c:	4663      	mov	r3, ip
 800565e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80057b4 <arm_mat_inverse_f32+0x1f8>
 8005662:	e009      	b.n	8005678 <arm_mat_inverse_f32+0xbc>
 8005664:	eef4 7a47 	vcmp.f32	s15, s14
 8005668:	3201      	adds	r2, #1
 800566a:	442b      	add	r3, r5
 800566c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005670:	fe37 7a87 	vselgt.f32	s14, s15, s14
 8005674:	42a2      	cmp	r2, r4
 8005676:	d012      	beq.n	800569e <arm_mat_inverse_f32+0xe2>
 8005678:	edd3 7a00 	vldr	s15, [r3]
 800567c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005680:	eeb1 6a67 	vneg.f32	s12, s15
 8005684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005688:	dcec      	bgt.n	8005664 <arm_mat_inverse_f32+0xa8>
 800568a:	eeb4 6a47 	vcmp.f32	s12, s14
 800568e:	3201      	adds	r2, #1
 8005690:	442b      	add	r3, r5
 8005692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005696:	fe36 7a07 	vselgt.f32	s14, s12, s14
 800569a:	42a2      	cmp	r2, r4
 800569c:	d1ec      	bne.n	8005678 <arm_mat_inverse_f32+0xbc>
 800569e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80056a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a6:	d073      	beq.n	8005790 <arm_mat_inverse_f32+0x1d4>
 80056a8:	eef5 6a40 	vcmp.f32	s13, #0.0
 80056ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b0:	d06e      	beq.n	8005790 <arm_mat_inverse_f32+0x1d4>
 80056b2:	4672      	mov	r2, lr
 80056b4:	4663      	mov	r3, ip
 80056b6:	ed93 7a00 	vldr	s14, [r3]
 80056ba:	3a01      	subs	r2, #1
 80056bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056c0:	ece3 7a01 	vstmia	r3!, {s15}
 80056c4:	d1f7      	bne.n	80056b6 <arm_mat_inverse_f32+0xfa>
 80056c6:	9901      	ldr	r1, [sp, #4]
 80056c8:	464b      	mov	r3, r9
 80056ca:	ed93 7a00 	vldr	s14, [r3]
 80056ce:	3901      	subs	r1, #1
 80056d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056d4:	ece3 7a01 	vstmia	r3!, {s15}
 80056d8:	d1f7      	bne.n	80056ca <arm_mat_inverse_f32+0x10e>
 80056da:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80056de:	9803      	ldr	r0, [sp, #12]
 80056e0:	42b1      	cmp	r1, r6
 80056e2:	d038      	beq.n	8005756 <arm_mat_inverse_f32+0x19a>
 80056e4:	eddb 6a00 	vldr	s13, [fp]
 80056e8:	465a      	mov	r2, fp
 80056ea:	4673      	mov	r3, lr
 80056ec:	46e2      	mov	sl, ip
 80056ee:	ecba 7a01 	vldmia	sl!, {s14}
 80056f2:	3b01      	subs	r3, #1
 80056f4:	edd2 7a00 	vldr	s15, [r2]
 80056f8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80056fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005700:	ece2 7a01 	vstmia	r2!, {s15}
 8005704:	d1f3      	bne.n	80056ee <arm_mat_inverse_f32+0x132>
 8005706:	44bb      	add	fp, r7
 8005708:	4602      	mov	r2, r0
 800570a:	9b01      	ldr	r3, [sp, #4]
 800570c:	46ca      	mov	sl, r9
 800570e:	ecba 7a01 	vldmia	sl!, {s14}
 8005712:	3b01      	subs	r3, #1
 8005714:	edd2 7a00 	vldr	s15, [r2]
 8005718:	ee26 7a87 	vmul.f32	s14, s13, s14
 800571c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005720:	ece2 7a01 	vstmia	r2!, {s15}
 8005724:	d1f3      	bne.n	800570e <arm_mat_inverse_f32+0x152>
 8005726:	4428      	add	r0, r5
 8005728:	3101      	adds	r1, #1
 800572a:	44c3      	add	fp, r8
 800572c:	428c      	cmp	r4, r1
 800572e:	d1d7      	bne.n	80056e0 <arm_mat_inverse_f32+0x124>
 8005730:	9b04      	ldr	r3, [sp, #16]
 8005732:	f1be 0e01 	subs.w	lr, lr, #1
 8005736:	f106 0601 	add.w	r6, r6, #1
 800573a:	f1a7 0704 	sub.w	r7, r7, #4
 800573e:	449c      	add	ip, r3
 8005740:	44a9      	add	r9, r5
 8005742:	d182      	bne.n	800564a <arm_mat_inverse_f32+0x8e>
 8005744:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574c:	d006      	beq.n	800575c <arm_mat_inverse_f32+0x1a0>
 800574e:	2000      	movs	r0, #0
 8005750:	b007      	add	sp, #28
 8005752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005756:	44bb      	add	fp, r7
 8005758:	4428      	add	r0, r5
 800575a:	e7e5      	b.n	8005728 <arm_mat_inverse_f32+0x16c>
 800575c:	9b05      	ldr	r3, [sp, #20]
 800575e:	9a01      	ldr	r2, [sp, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	fb02 f204 	mul.w	r2, r2, r4
 8005766:	edd3 7a00 	vldr	s15, [r3]
 800576a:	4614      	mov	r4, r2
 800576c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005774:	d1eb      	bne.n	800574e <arm_mat_inverse_f32+0x192>
 8005776:	3304      	adds	r3, #4
 8005778:	e006      	b.n	8005788 <arm_mat_inverse_f32+0x1cc>
 800577a:	ecf3 7a01 	vldmia	r3!, {s15}
 800577e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005786:	d1e2      	bne.n	800574e <arm_mat_inverse_f32+0x192>
 8005788:	f10e 0e01 	add.w	lr, lr, #1
 800578c:	4574      	cmp	r4, lr
 800578e:	d1f4      	bne.n	800577a <arm_mat_inverse_f32+0x1be>
 8005790:	f06f 0004 	mvn.w	r0, #4
 8005794:	b007      	add	sp, #28
 8005796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579a:	f06f 0002 	mvn.w	r0, #2
 800579e:	b007      	add	sp, #28
 80057a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a4:	4655      	mov	r5, sl
 80057a6:	3e01      	subs	r6, #1
 80057a8:	f845 bb04 	str.w	fp, [r5], #4
 80057ac:	f47f af23 	bne.w	80055f6 <arm_mat_inverse_f32+0x3a>
 80057b0:	e73b      	b.n	800562a <arm_mat_inverse_f32+0x6e>
 80057b2:	bf00      	nop
 80057b4:	00000000 	.word	0x00000000

080057b8 <arm_mat_init_f32>:
 80057b8:	8001      	strh	r1, [r0, #0]
 80057ba:	8042      	strh	r2, [r0, #2]
 80057bc:	6043      	str	r3, [r0, #4]
 80057be:	4770      	bx	lr

080057c0 <__libc_init_array>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4d0d      	ldr	r5, [pc, #52]	; (80057f8 <__libc_init_array+0x38>)
 80057c4:	4c0d      	ldr	r4, [pc, #52]	; (80057fc <__libc_init_array+0x3c>)
 80057c6:	1b64      	subs	r4, r4, r5
 80057c8:	10a4      	asrs	r4, r4, #2
 80057ca:	2600      	movs	r6, #0
 80057cc:	42a6      	cmp	r6, r4
 80057ce:	d109      	bne.n	80057e4 <__libc_init_array+0x24>
 80057d0:	4d0b      	ldr	r5, [pc, #44]	; (8005800 <__libc_init_array+0x40>)
 80057d2:	4c0c      	ldr	r4, [pc, #48]	; (8005804 <__libc_init_array+0x44>)
 80057d4:	f000 f820 	bl	8005818 <_init>
 80057d8:	1b64      	subs	r4, r4, r5
 80057da:	10a4      	asrs	r4, r4, #2
 80057dc:	2600      	movs	r6, #0
 80057de:	42a6      	cmp	r6, r4
 80057e0:	d105      	bne.n	80057ee <__libc_init_array+0x2e>
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e8:	4798      	blx	r3
 80057ea:	3601      	adds	r6, #1
 80057ec:	e7ee      	b.n	80057cc <__libc_init_array+0xc>
 80057ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f2:	4798      	blx	r3
 80057f4:	3601      	adds	r6, #1
 80057f6:	e7f2      	b.n	80057de <__libc_init_array+0x1e>
 80057f8:	080058b0 	.word	0x080058b0
 80057fc:	080058b0 	.word	0x080058b0
 8005800:	080058b0 	.word	0x080058b0
 8005804:	080058b4 	.word	0x080058b4

08005808 <memset>:
 8005808:	4402      	add	r2, r0
 800580a:	4603      	mov	r3, r0
 800580c:	4293      	cmp	r3, r2
 800580e:	d100      	bne.n	8005812 <memset+0xa>
 8005810:	4770      	bx	lr
 8005812:	f803 1b01 	strb.w	r1, [r3], #1
 8005816:	e7f9      	b.n	800580c <memset+0x4>

08005818 <_init>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	bf00      	nop
 800581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581e:	bc08      	pop	{r3}
 8005820:	469e      	mov	lr, r3
 8005822:	4770      	bx	lr

08005824 <_fini>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	bf00      	nop
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr
